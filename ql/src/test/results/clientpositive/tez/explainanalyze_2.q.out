PREHOOK: query: CREATE TABLE tab(key int, value string) PARTITIONED BY(ds STRING)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@tab
POSTHOOK: query: CREATE TABLE tab(key int, value string) PARTITIONED BY(ds STRING)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@tab
PREHOOK: query: insert overwrite table tab partition (ds='2008-04-08')
select key,value from src
PREHOOK: type: QUERY
PREHOOK: Input: default@src
PREHOOK: Output: default@tab@ds=2008-04-08
POSTHOOK: query: insert overwrite table tab partition (ds='2008-04-08')
select key,value from src
POSTHOOK: type: QUERY
POSTHOOK: Input: default@src
POSTHOOK: Output: default@tab@ds=2008-04-08
POSTHOOK: Lineage: tab PARTITION(ds=2008-04-08).key EXPRESSION [(src)src.FieldSchema(name:key, type:string, comment:default), ]
POSTHOOK: Lineage: tab PARTITION(ds=2008-04-08).value SIMPLE [(src)src.FieldSchema(name:value, type:string, comment:default), ]
PREHOOK: query: select s1.key as key, s1.value as value from tab s1 join tab s3 on s1.key=s3.key
PREHOOK: type: QUERY
PREHOOK: Input: default@tab
PREHOOK: Input: default@tab@ds=2008-04-08
#### A masked pattern was here ####
POSTHOOK: query: select s1.key as key, s1.value as value from tab s1 join tab s3 on s1.key=s3.key
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab
POSTHOOK: Input: default@tab@ds=2008-04-08
#### A masked pattern was here ####
PREHOOK: query: explain analyze 
select s1.key as key, s1.value as value from tab s1 join tab s3 on s1.key=s3.key
PREHOOK: type: QUERY
POSTHOOK: query: explain analyze 
select s1.key as key, s1.value as value from tab s1 join tab s3 on s1.key=s3.key
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 3 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 2
      File Output Operator [FS_10]
        Merge Join Operator [MERGEJOIN_15] (rows=550/1028 width=10)
          Conds:RS_6._col0=RS_7._col0(Inner),Output:["_col0","_col1"]
        <-Map 1 [SIMPLE_EDGE]
          SHUFFLE [RS_6]
            PartitionCols:_col0
            Select Operator [SEL_2] (rows=500/500 width=10)
              Output:["_col0","_col1"]
              Filter Operator [FIL_13] (rows=500/500 width=10)
                predicate:key is not null
                TableScan [TS_0] (rows=500/500 width=10)
                  default@tab,s1,Tbl:COMPLETE,Col:NONE,Output:["key","value"]
        <-Map 3 [SIMPLE_EDGE]
          SHUFFLE [RS_7]
            PartitionCols:_col0
            Select Operator [SEL_5] (rows=500/500 width=10)
              Output:["_col0"]
              Filter Operator [FIL_14] (rows=500/500 width=10)
                predicate:key is not null
                TableScan [TS_3] (rows=500/500 width=10)
                  default@tab,s3,Tbl:COMPLETE,Col:NONE,Output:["key"]

PREHOOK: query: select s1.key as key, s1.value as value from tab s1 join tab s3 on s1.key=s3.key join tab s2 on s1.value=s2.value
PREHOOK: type: QUERY
PREHOOK: Input: default@tab
PREHOOK: Input: default@tab@ds=2008-04-08
#### A masked pattern was here ####
POSTHOOK: query: select s1.key as key, s1.value as value from tab s1 join tab s3 on s1.key=s3.key join tab s2 on s1.value=s2.value
POSTHOOK: type: QUERY
POSTHOOK: Input: default@tab
POSTHOOK: Input: default@tab@ds=2008-04-08
#### A masked pattern was here ####
PREHOOK: query: explain analyze 
select s1.key as key, s1.value as value from tab s1 join tab s3 on s1.key=s3.key join tab s2 on s1.value=s2.value
PREHOOK: type: QUERY
POSTHOOK: query: explain analyze 
select s1.key as key, s1.value as value from tab s1 join tab s3 on s1.key=s3.key join tab s2 on s1.value=s2.value
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 4 (SIMPLE_EDGE)
Reducer 3 <- Map 5 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 3
      File Output Operator [FS_16]
        Merge Join Operator [MERGEJOIN_26] (rows=605/2654 width=10)
          Conds:RS_12._col1=RS_13._col0(Inner),Output:["_col0","_col1"]
        <-Map 5 [SIMPLE_EDGE]
          SHUFFLE [RS_13]
            PartitionCols:_col0
            Select Operator [SEL_8] (rows=500/500 width=10)
              Output:["_col0"]
              Filter Operator [FIL_24] (rows=500/500 width=10)
                predicate:value is not null
                TableScan [TS_6] (rows=500/500 width=10)
                  default@tab,s2,Tbl:COMPLETE,Col:NONE,Output:["value"]
        <-Reducer 2 [SIMPLE_EDGE]
          SHUFFLE [RS_12]
            PartitionCols:_col1
            Merge Join Operator [MERGEJOIN_25] (rows=550/1028 width=10)
              Conds:RS_9._col0=RS_10._col0(Inner),Output:["_col0","_col1"]
            <-Map 1 [SIMPLE_EDGE]
              SHUFFLE [RS_9]
                PartitionCols:_col0
                Select Operator [SEL_2] (rows=500/500 width=10)
                  Output:["_col0","_col1"]
                  Filter Operator [FIL_22] (rows=500/500 width=10)
                    predicate:(key is not null and value is not null)
                    TableScan [TS_0] (rows=500/500 width=10)
                      default@tab,s1,Tbl:COMPLETE,Col:NONE,Output:["key","value"]
            <-Map 4 [SIMPLE_EDGE]
              SHUFFLE [RS_10]
                PartitionCols:_col0
                Select Operator [SEL_5] (rows=500/500 width=10)
                  Output:["_col0"]
                  Filter Operator [FIL_23] (rows=500/500 width=10)
                    predicate:key is not null
                    TableScan [TS_3] (rows=500/500 width=10)
                      default@tab,s3,Tbl:COMPLETE,Col:NONE,Output:["key"]

