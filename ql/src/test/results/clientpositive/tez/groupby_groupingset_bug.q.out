PREHOOK: query: drop table if exists x1_store_sales
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists x1_store_sales
POSTHOOK: type: DROPTABLE
PREHOOK: query: drop table if exists x1_date_dim
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists x1_date_dim
POSTHOOK: type: DROPTABLE
PREHOOK: query: drop table if exists x1_item
PREHOOK: type: DROPTABLE
POSTHOOK: query: drop table if exists x1_item
POSTHOOK: type: DROPTABLE
PREHOOK: query: create table x1_store_sales 
(
	ss_item_sk	int
)
partitioned by (ss_sold_date_sk int)
stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@x1_store_sales
POSTHOOK: query: create table x1_store_sales 
(
	ss_item_sk	int
)
partitioned by (ss_sold_date_sk int)
stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@x1_store_sales
PREHOOK: query: create table x1_date_dim
(
	d_date_sk	int,
	d_month_seq	int,
	d_year		int,
	d_moy		int
)
stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@x1_date_dim
POSTHOOK: query: create table x1_date_dim
(
	d_date_sk	int,
	d_month_seq	int,
	d_year		int,
	d_moy		int
)
stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@x1_date_dim
PREHOOK: query: create table x1_item
(
	i_item_sk	int,
	i_category	char(10),
	i_current_price	decimal(7,2)
)
stored as orc
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@x1_item
POSTHOOK: query: create table x1_item
(
	i_item_sk	int,
	i_category	char(10),
	i_current_price	decimal(7,2)
)
stored as orc
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@x1_item
PREHOOK: query: insert into x1_date_dim values	(1,1,2000,2),
				(1,2,2001,2)
PREHOOK: type: QUERY
PREHOOK: Input: default@values__tmp__table__1
PREHOOK: Output: default@x1_date_dim
POSTHOOK: query: insert into x1_date_dim values	(1,1,2000,2),
				(1,2,2001,2)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@values__tmp__table__1
POSTHOOK: Output: default@x1_date_dim
POSTHOOK: Lineage: x1_date_dim.d_date_sk EXPRESSION [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col1, type:string, comment:), ]
POSTHOOK: Lineage: x1_date_dim.d_month_seq EXPRESSION [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col2, type:string, comment:), ]
POSTHOOK: Lineage: x1_date_dim.d_moy EXPRESSION [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col4, type:string, comment:), ]
POSTHOOK: Lineage: x1_date_dim.d_year EXPRESSION [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col3, type:string, comment:), ]
PREHOOK: query: insert into x1_store_sales partition (ss_sold_date_sk=1) values (1)
PREHOOK: type: QUERY
PREHOOK: Input: default@values__tmp__table__2
PREHOOK: Output: default@x1_store_sales@ss_sold_date_sk=1
POSTHOOK: query: insert into x1_store_sales partition (ss_sold_date_sk=1) values (1)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@values__tmp__table__2
POSTHOOK: Output: default@x1_store_sales@ss_sold_date_sk=1
POSTHOOK: Lineage: x1_store_sales PARTITION(ss_sold_date_sk=1).ss_item_sk EXPRESSION [(values__tmp__table__2)values__tmp__table__2.FieldSchema(name:tmp_values_col1, type:string, comment:), ]
PREHOOK: query: insert into x1_store_sales partition (ss_sold_date_sk=2) values (2)
PREHOOK: type: QUERY
PREHOOK: Input: default@values__tmp__table__3
PREHOOK: Output: default@x1_store_sales@ss_sold_date_sk=2
POSTHOOK: query: insert into x1_store_sales partition (ss_sold_date_sk=2) values (2)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@values__tmp__table__3
POSTHOOK: Output: default@x1_store_sales@ss_sold_date_sk=2
POSTHOOK: Lineage: x1_store_sales PARTITION(ss_sold_date_sk=2).ss_item_sk EXPRESSION [(values__tmp__table__3)values__tmp__table__3.FieldSchema(name:tmp_values_col1, type:string, comment:), ]
PREHOOK: query: insert into x1_item values (1,2,1),(1,2,1),(2,2,1)
PREHOOK: type: QUERY
PREHOOK: Input: default@values__tmp__table__4
PREHOOK: Output: default@x1_item
POSTHOOK: query: insert into x1_item values (1,2,1),(1,2,1),(2,2,1)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@values__tmp__table__4
POSTHOOK: Output: default@x1_item
POSTHOOK: Lineage: x1_item.i_category EXPRESSION [(values__tmp__table__4)values__tmp__table__4.FieldSchema(name:tmp_values_col2, type:string, comment:), ]
POSTHOOK: Lineage: x1_item.i_current_price EXPRESSION [(values__tmp__table__4)values__tmp__table__4.FieldSchema(name:tmp_values_col3, type:string, comment:), ]
POSTHOOK: Lineage: x1_item.i_item_sk EXPRESSION [(values__tmp__table__4)values__tmp__table__4.FieldSchema(name:tmp_values_col1, type:string, comment:), ]
PREHOOK: query: alter table x1_store_sales partition (ss_sold_date_sk=1) update statistics set(
'numRows'='123456',
'rawDataSize'='1234567')
PREHOOK: type: ALTERTABLE_UPDATEPARTSTATS
PREHOOK: Input: default@x1_store_sales
PREHOOK: Output: default@x1_store_sales@ss_sold_date_sk=1
POSTHOOK: query: alter table x1_store_sales partition (ss_sold_date_sk=1) update statistics set(
'numRows'='123456',
'rawDataSize'='1234567')
POSTHOOK: type: ALTERTABLE_UPDATEPARTSTATS
POSTHOOK: Input: default@x1_store_sales
POSTHOOK: Input: default@x1_store_sales@ss_sold_date_sk=1
POSTHOOK: Output: default@x1_store_sales@ss_sold_date_sk=1
PREHOOK: query: alter table x1_date_dim update statistics set(
'numRows'='56',
'rawDataSize'='81449')
PREHOOK: type: ALTERTABLE_UPDATETABLESTATS
PREHOOK: Input: default@x1_date_dim
PREHOOK: Output: default@x1_date_dim
POSTHOOK: query: alter table x1_date_dim update statistics set(
'numRows'='56',
'rawDataSize'='81449')
POSTHOOK: type: ALTERTABLE_UPDATETABLESTATS
POSTHOOK: Input: default@x1_date_dim
POSTHOOK: Output: default@x1_date_dim
PREHOOK: query: alter table x1_item update statistics set(
'numRows'='18',
'rawDataSize'='32710')
PREHOOK: type: ALTERTABLE_UPDATETABLESTATS
PREHOOK: Input: default@x1_item
PREHOOK: Output: default@x1_item
POSTHOOK: query: alter table x1_item update statistics set(
'numRows'='18',
'rawDataSize'='32710')
POSTHOOK: type: ALTERTABLE_UPDATETABLESTATS
POSTHOOK: Input: default@x1_item
POSTHOOK: Output: default@x1_item
PREHOOK: query: explain 
select   count(*) cnt
 from
     x1_store_sales s
     ,x1_date_dim d
     ,x1_item i
 where  
	1=1
 	and s.ss_sold_date_sk = d.d_date_sk
 	and s.ss_item_sk = i.i_item_sk
 	and d.d_month_seq in	 
 	     (select distinct (d_month_seq)
 	      from x1_date_dim
               where d_year = 2000 and d_year*d_moy > 200000
 	        and d_moy = 2 )
 	and i.i_current_price > 
            (select min(j.i_current_price) 
 	     from x1_item j 
 	     where j.i_category = i.i_category)

 group by d.d_month_seq
 order by cnt 
 limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain 
select   count(*) cnt
 from
     x1_store_sales s
     ,x1_date_dim d
     ,x1_item i
 where  
	1=1
 	and s.ss_sold_date_sk = d.d_date_sk
 	and s.ss_item_sk = i.i_item_sk
 	and d.d_month_seq in	 
 	     (select distinct (d_month_seq)
 	      from x1_date_dim
               where d_year = 2000 and d_year*d_moy > 200000
 	        and d_moy = 2 )
 	and i.i_current_price > 
            (select min(j.i_current_price) 
 	     from x1_item j 
 	     where j.i_category = i.i_category)

 group by d.d_month_seq
 order by cnt 
 limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Reducer 3 (BROADCAST_EDGE)
Map 4 <- Map 1 (BROADCAST_EDGE), Map 7 (BROADCAST_EDGE)
Map 7 <- Reducer 10 (BROADCAST_EDGE), Reducer 9 (BROADCAST_EDGE)
Reducer 10 <- Reducer 9 (CUSTOM_SIMPLE_EDGE)
Reducer 3 <- Map 2 (SIMPLE_EDGE)
Reducer 5 <- Map 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 5 (SIMPLE_EDGE)
Reducer 9 <- Map 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 6 vectorized
      File Output Operator [FS_153]
        Limit [LIM_152] (rows=100 width=10)
          Number of rows:100
          Select Operator [SEL_151] (rows=24897 width=10)
            Output:["_col0"]
          <-Reducer 5 [SIMPLE_EDGE] vectorized
            SHUFFLE [RS_150]
              Select Operator [SEL_149] (rows=24897 width=10)
                Output:["_col0"]
                Group By Operator [GBY_148] (rows=24897 width=10)
                  Output:["_col0","_col1"],aggregations:["count(VALUE._col0)"],keys:KEY._col0
                <-Map 4 [SIMPLE_EDGE] vectorized
                  SHUFFLE [RS_147]
                    PartitionCols:_col0
                    Group By Operator [GBY_146] (rows=49794 width=10)
                      Output:["_col0","_col1"],aggregations:["count()"],keys:_col3
                      Select Operator [SEL_145] (rows=49794 width=10)
                        Output:["_col3"]
                        Filter Operator [FIL_144] (rows=49794 width=10)
                          predicate:(_col6 > CASE WHEN (_col9 is null) THEN (null) ELSE (_col8) END)
                          Select Operator [SEL_143] (rows=149382 width=10)
                            Output:["_col3","_col6","_col8","_col9"]
                            Map Join Operator [MAPJOIN_142] (rows=149382 width=10)
                              Conds:MAPJOIN_141._col7=RS_135._col0(Inner),HybridGraceHashJoin:true,Output:["_col2","_col3","_col4","_col9"]
                            <-Map 7 [BROADCAST_EDGE] vectorized
                              BROADCAST [RS_135]
                                PartitionCols:_col0
                                Map Join Operator [MAPJOIN_134] (rows=61 width=1468)
                                  Conds:SEL_133._col1=RS_126._col0(Inner),HybridGraceHashJoin:true,Output:["_col0","_col1"]
                                <-Reducer 9 [BROADCAST_EDGE] vectorized
                                  PARTITION_ONLY_SHUFFLE [RS_126]
                                    PartitionCols:_col0
                                    Group By Operator [GBY_125] (rows=1 width=1454)
                                      Output:["_col0"],keys:_col0
                                      Group By Operator [GBY_124] (rows=2 width=1454)
                                        Output:["_col0"],keys:KEY._col0
                                      <-Map 8 [SIMPLE_EDGE] vectorized
                                        SHUFFLE [RS_123]
                                          PartitionCols:_col0
                                          Group By Operator [GBY_122] (rows=4 width=1454)
                                            Output:["_col0"],keys:d_month_seq
                                            Select Operator [SEL_121] (rows=4 width=1454)
                                              Output:["d_month_seq"]
                                              Filter Operator [FIL_120] (rows=4 width=1454)
                                                predicate:((d_year = 2000) and ((d_year * d_moy) > 200000) and (d_moy = 2) and d_month_seq is not null)
                                                TableScan [TS_16] (rows=56 width=1454)
                                                  default@x1_date_dim,x1_date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_month_seq","d_year","d_moy"]
                                <-Select Operator [SEL_133] (rows=56 width=1454)
                                    Output:["_col0","_col1"]
                                    Filter Operator [FIL_132] (rows=56 width=1454)
                                      predicate:(d_date_sk is not null and d_month_seq is not null and (d_month_seq BETWEEN DynamicValue(RS_29_x1_date_dim_d_month_seq_min) AND DynamicValue(RS_29_x1_date_dim_d_month_seq_max) and in_bloom_filter(d_month_seq, DynamicValue(RS_29_x1_date_dim_d_month_seq_bloom_filter))))
                                      TableScan [TS_13] (rows=56 width=1454)
                                        default@x1_date_dim,d,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_month_seq"]
                                      <-Reducer 10 [BROADCAST_EDGE] vectorized
                                        BROADCAST [RS_131]
                                          Group By Operator [GBY_130] (rows=1 width=12)
                                            Output:["_col0","_col1","_col2"],aggregations:["min(VALUE._col0)","max(VALUE._col1)","bloom_filter(VALUE._col2, expectedEntries=1000000)"]
                              Dynamic Partitioning Event Operator [EVENT_138] (rows=61 width=1468)
                                Group By Operator [GBY_137] (rows=61 width=1468)
                                  Output:["_col0"],keys:_col0
                                  Select Operator [SEL_136] (rows=61 width=1468)
                                    Output:["_col0"]
                                     Please refer to the previous Map Join Operator [MAPJOIN_134]
                            <-Map Join Operator [MAPJOIN_141] (rows=135802 width=10)
                                Conds:RS_119._col0=SEL_140._col0(Inner),HybridGraceHashJoin:true,Output:["_col2","_col3","_col4","_col7"]
                              <-Map 1 [BROADCAST_EDGE] vectorized
                                BROADCAST [RS_119]
                                  PartitionCols:_col0
                                  Map Join Operator [MAPJOIN_118] (rows=19 width=1893)
                                    Conds:SEL_117._col1=RS_115._col2(Left Outer),HybridGraceHashJoin:true,Output:["_col0","_col2","_col3","_col4"]
                                  <-Reducer 3 [BROADCAST_EDGE] vectorized
                                    BROADCAST [RS_115]
                                      PartitionCols:_col2
                                      Select Operator [SEL_114] (rows=9 width=1817)
                                        Output:["_col0","_col1","_col2"]
                                        Group By Operator [GBY_113] (rows=9 width=1817)
                                          Output:["_col0","_col1"],aggregations:["min(VALUE._col0)"],keys:KEY._col0
                                        <-Map 2 [SIMPLE_EDGE] vectorized
                                          SHUFFLE [RS_112]
                                            PartitionCols:_col0
                                            Group By Operator [GBY_111] (rows=18 width=1817)
                                              Output:["_col0","_col1"],aggregations:["min(i_current_price)"],keys:i_category
                                              Filter Operator [FIL_110] (rows=18 width=1817)
                                                predicate:i_category is not null
                                                TableScan [TS_3] (rows=18 width=1817)
                                                  default@x1_item,j,Tbl:COMPLETE,Col:NONE,Output:["i_category","i_current_price"]
                                  <-Select Operator [SEL_117] (rows=18 width=1817)
                                      Output:["_col0","_col1","_col2"]
                                      Filter Operator [FIL_116] (rows=18 width=1817)
                                        predicate:i_item_sk is not null
                                        TableScan [TS_0] (rows=18 width=1817)
                                          default@x1_item,i,Tbl:COMPLETE,Col:NONE,Output:["i_item_sk","i_category","i_current_price"]
                              <-Select Operator [SEL_140] (rows=123457 width=10)
                                  Output:["_col0","_col1"]
                                  Filter Operator [FIL_139] (rows=123457 width=10)
                                    predicate:ss_item_sk is not null
                                    TableScan [TS_10] (rows=123457 width=10)
                                      default@x1_store_sales,s,Tbl:COMPLETE,Col:NONE,Output:["ss_item_sk"]

PREHOOK: query: select   count(*) cnt
 from
     x1_store_sales s
     ,x1_date_dim d
     ,x1_item i
 where  
	1=1
 	and s.ss_sold_date_sk = d.d_date_sk
 	and s.ss_item_sk = i.i_item_sk
 	and d.d_month_seq in	 
 	     (select distinct (d_month_seq)
 	      from x1_date_dim
               where d_year = 2000 and d_year*d_moy > 200000
 	        and d_moy = 2 )
 	and i.i_current_price > 
            (select min(j.i_current_price) 
 	     from x1_item j 
 	     where j.i_category = i.i_category)

 group by d.d_month_seq
 order by cnt 
 limit 100
PREHOOK: type: QUERY
PREHOOK: Input: default@x1_date_dim
PREHOOK: Input: default@x1_item
PREHOOK: Input: default@x1_store_sales
PREHOOK: Input: default@x1_store_sales@ss_sold_date_sk=1
PREHOOK: Input: default@x1_store_sales@ss_sold_date_sk=2
#### A masked pattern was here ####
POSTHOOK: query: select   count(*) cnt
 from
     x1_store_sales s
     ,x1_date_dim d
     ,x1_item i
 where  
	1=1
 	and s.ss_sold_date_sk = d.d_date_sk
 	and s.ss_item_sk = i.i_item_sk
 	and d.d_month_seq in	 
 	     (select distinct (d_month_seq)
 	      from x1_date_dim
               where d_year = 2000 and d_year*d_moy > 200000
 	        and d_moy = 2 )
 	and i.i_current_price > 
            (select min(j.i_current_price) 
 	     from x1_item j 
 	     where j.i_category = i.i_category)

 group by d.d_month_seq
 order by cnt 
 limit 100
POSTHOOK: type: QUERY
POSTHOOK: Input: default@x1_date_dim
POSTHOOK: Input: default@x1_item
POSTHOOK: Input: default@x1_store_sales
POSTHOOK: Input: default@x1_store_sales@ss_sold_date_sk=1
POSTHOOK: Input: default@x1_store_sales@ss_sold_date_sk=2
#### A masked pattern was here ####
