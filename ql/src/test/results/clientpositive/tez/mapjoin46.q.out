PREHOOK: query: CREATE TABLE test1 (key INT, value INT, col_1 STRING)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@test1
POSTHOOK: query: CREATE TABLE test1 (key INT, value INT, col_1 STRING)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test1
PREHOOK: query: INSERT INTO test1 VALUES (NULL, NULL, 'None'), (98, NULL, 'None'),
    (99, 0, 'Alice'), (99, 2, 'Mat'), (100, 1, 'Bob'), (101, 2, 'Car')
PREHOOK: type: QUERY
PREHOOK: Input: default@values__tmp__table__1
PREHOOK: Output: default@test1
POSTHOOK: query: INSERT INTO test1 VALUES (NULL, NULL, 'None'), (98, NULL, 'None'),
    (99, 0, 'Alice'), (99, 2, 'Mat'), (100, 1, 'Bob'), (101, 2, 'Car')
POSTHOOK: type: QUERY
POSTHOOK: Input: default@values__tmp__table__1
POSTHOOK: Output: default@test1
POSTHOOK: Lineage: test1.col_1 SIMPLE [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col3, type:string, comment:), ]
POSTHOOK: Lineage: test1.key EXPRESSION [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col1, type:string, comment:), ]
POSTHOOK: Lineage: test1.value EXPRESSION [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col2, type:string, comment:), ]
PREHOOK: query: CREATE TABLE test2 (key INT, value INT, col_2 STRING)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@test2
POSTHOOK: query: CREATE TABLE test2 (key INT, value INT, col_2 STRING)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test2
PREHOOK: query: INSERT INTO test2 VALUES (102, 2, 'Del'), (103, 2, 'Ema'),
    (104, 3, 'Fli'), (105, NULL, 'None')
PREHOOK: type: QUERY
PREHOOK: Input: default@values__tmp__table__2
PREHOOK: Output: default@test2
POSTHOOK: query: INSERT INTO test2 VALUES (102, 2, 'Del'), (103, 2, 'Ema'),
    (104, 3, 'Fli'), (105, NULL, 'None')
POSTHOOK: type: QUERY
POSTHOOK: Input: default@values__tmp__table__2
POSTHOOK: Output: default@test2
POSTHOOK: Lineage: test2.col_2 SIMPLE [(values__tmp__table__2)values__tmp__table__2.FieldSchema(name:tmp_values_col3, type:string, comment:), ]
POSTHOOK: Lineage: test2.key EXPRESSION [(values__tmp__table__2)values__tmp__table__2.FieldSchema(name:tmp_values_col1, type:string, comment:), ]
POSTHOOK: Lineage: test2.value EXPRESSION [(values__tmp__table__2)values__tmp__table__2.FieldSchema(name:tmp_values_col2, type:string, comment:), ]
PREHOOK: query: -- Basic outer join
EXPLAIN
SELECT *
FROM test1 LEFT OUTER JOIN test2
ON (test1.value=test2.value)
PREHOOK: type: QUERY
POSTHOOK: query: -- Basic outer join
EXPLAIN
SELECT *
FROM test1 LEFT OUTER JOIN test2
ON (test1.value=test2.value)
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 2 (BROADCAST_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Map 1
      File Output Operator [FS_8]
        Map Join Operator [MAPJOIN_11] (rows=6 width=10)
          Conds:SEL_1._col1=RS_5._col1(Left Outer),HybridGraceHashJoin:true,Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
        <-Map 2 [BROADCAST_EDGE]
          BROADCAST [RS_5]
            PartitionCols:_col1
            Select Operator [SEL_3] (rows=4 width=9)
              Output:["_col0","_col1","_col2"]
              TableScan [TS_2] (rows=4 width=9)
                default@test2,test2,Tbl:COMPLETE,Col:NONE,Output:["key","value","col_2"]
        <-Select Operator [SEL_1] (rows=6 width=9)
            Output:["_col0","_col1","_col2"]
            TableScan [TS_0] (rows=6 width=9)
              default@test1,test1,Tbl:COMPLETE,Col:NONE,Output:["key","value","col_1"]

PREHOOK: query: SELECT *
FROM test1 LEFT OUTER JOIN test2
ON (test1.value=test2.value)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1
PREHOOK: Input: default@test2
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1 LEFT OUTER JOIN test2
ON (test1.value=test2.value)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1
POSTHOOK: Input: default@test2
#### A masked pattern was here ####
NULL	NULL	None	NULL	NULL	NULL
98	NULL	None	NULL	NULL	NULL
99	0	Alice	NULL	NULL	NULL
99	2	Mat	102	2	Del
99	2	Mat	103	2	Ema
100	1	Bob	NULL	NULL	NULL
101	2	Car	102	2	Del
101	2	Car	103	2	Ema
PREHOOK: query: -- Conjunction with pred on multiple inputs and single inputs (left outer join)
EXPLAIN
SELECT *
FROM test1 LEFT OUTER JOIN test2
ON (test1.value=test2.value
  AND test1.key between 100 and 102
  AND test2.key between 100 and 102)
PREHOOK: type: QUERY
POSTHOOK: query: -- Conjunction with pred on multiple inputs and single inputs (left outer join)
EXPLAIN
SELECT *
FROM test1 LEFT OUTER JOIN test2
ON (test1.value=test2.value
  AND test1.key between 100 and 102
  AND test2.key between 100 and 102)
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 2 (BROADCAST_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Map 1
      File Output Operator [FS_9]
        Map Join Operator [MAPJOIN_12] (rows=6 width=10)
          Conds:SEL_1._col1=RS_6._col1(Left Outer),HybridGraceHashJoin:true,Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
        <-Map 2 [BROADCAST_EDGE]
          BROADCAST [RS_6]
            PartitionCols:_col1
            Select Operator [SEL_4] (rows=2 width=9)
              Output:["_col0","_col1","_col2"]
              Filter Operator [FIL_11] (rows=2 width=9)
                predicate:key BETWEEN 100 AND 102
                TableScan [TS_2] (rows=4 width=9)
                  default@test2,test2,Tbl:COMPLETE,Col:NONE,Output:["key","value","col_2"]
        <-Select Operator [SEL_1] (rows=6 width=9)
            Output:["_col0","_col1","_col2"]
            TableScan [TS_0] (rows=6 width=9)
              default@test1,test1,Tbl:COMPLETE,Col:NONE,Output:["key","value","col_1"]

PREHOOK: query: SELECT *
FROM test1 LEFT OUTER JOIN test2
ON (test1.value=test2.value
  AND test1.key between 100 and 102
  AND test2.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1
PREHOOK: Input: default@test2
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1 LEFT OUTER JOIN test2
ON (test1.value=test2.value
  AND test1.key between 100 and 102
  AND test2.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1
POSTHOOK: Input: default@test2
#### A masked pattern was here ####
NULL	NULL	None	NULL	NULL	NULL
98	NULL	None	NULL	NULL	NULL
99	0	Alice	NULL	NULL	NULL
99	2	Mat	NULL	NULL	NULL
100	1	Bob	NULL	NULL	NULL
101	2	Car	102	2	Del
Warning: Map Join MAPJOIN[11][bigTable=?] in task 'Map 1' is a cross product
PREHOOK: query: -- Conjunction with pred on single inputs (left outer join)
EXPLAIN
SELECT *
FROM test1 LEFT OUTER JOIN test2
ON (test1.key between 100 and 102
  AND test2.key between 100 and 102)
PREHOOK: type: QUERY
POSTHOOK: query: -- Conjunction with pred on single inputs (left outer join)
EXPLAIN
SELECT *
FROM test1 LEFT OUTER JOIN test2
ON (test1.key between 100 and 102
  AND test2.key between 100 and 102)
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 2 (BROADCAST_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Map 1
      File Output Operator [FS_9]
        Map Join Operator [MAPJOIN_11] (rows=12 width=19)
          Conds:(Left Outer),Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
        <-Map 2 [BROADCAST_EDGE]
          BROADCAST [RS_6]
            Select Operator [SEL_4] (rows=2 width=9)
              Output:["_col0","_col1","_col2"]
              Filter Operator [FIL_10] (rows=2 width=9)
                predicate:key BETWEEN 100 AND 102
                TableScan [TS_2] (rows=4 width=9)
                  default@test2,test2,Tbl:COMPLETE,Col:NONE,Output:["key","value","col_2"]
        <-Select Operator [SEL_1] (rows=6 width=9)
            Output:["_col0","_col1","_col2"]
            TableScan [TS_0] (rows=6 width=9)
              default@test1,test1,Tbl:COMPLETE,Col:NONE,Output:["key","value","col_1"]

Warning: Map Join MAPJOIN[11][bigTable=?] in task 'Map 1' is a cross product
PREHOOK: query: SELECT *
FROM test1 LEFT OUTER JOIN test2
ON (test1.key between 100 and 102
  AND test2.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1
PREHOOK: Input: default@test2
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1 LEFT OUTER JOIN test2
ON (test1.key between 100 and 102
  AND test2.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1
POSTHOOK: Input: default@test2
#### A masked pattern was here ####
NULL	NULL	None	NULL	NULL	NULL
98	NULL	None	NULL	NULL	NULL
99	0	Alice	NULL	NULL	NULL
99	2	Mat	NULL	NULL	NULL
100	1	Bob	102	2	Del
101	2	Car	102	2	Del
PREHOOK: query: -- Conjunction with pred on multiple inputs and none (left outer join)
EXPLAIN
SELECT *
FROM test1 RIGHT OUTER JOIN test2
ON (test1.value=test2.value AND true)
PREHOOK: type: QUERY
POSTHOOK: query: -- Conjunction with pred on multiple inputs and none (left outer join)
EXPLAIN
SELECT *
FROM test1 RIGHT OUTER JOIN test2
ON (test1.value=test2.value AND true)
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 2 <- Map 1 (BROADCAST_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Map 2
      File Output Operator [FS_8]
        Map Join Operator [MAPJOIN_11] (rows=6 width=10)
          Conds:RS_4._col1=SEL_3._col1(Right Outer),HybridGraceHashJoin:true,Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
        <-Map 1 [BROADCAST_EDGE]
          BROADCAST [RS_4]
            PartitionCols:_col1
            Select Operator [SEL_1] (rows=6 width=9)
              Output:["_col0","_col1","_col2"]
              TableScan [TS_0] (rows=6 width=9)
                default@test1,test1,Tbl:COMPLETE,Col:NONE,Output:["key","value","col_1"]
        <-Select Operator [SEL_3] (rows=4 width=9)
            Output:["_col0","_col1","_col2"]
            TableScan [TS_2] (rows=4 width=9)
              default@test2,test2,Tbl:COMPLETE,Col:NONE,Output:["key","value","col_2"]

PREHOOK: query: SELECT *
FROM test1 RIGHT OUTER JOIN test2
ON (test1.value=test2.value AND true)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1
PREHOOK: Input: default@test2
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1 RIGHT OUTER JOIN test2
ON (test1.value=test2.value AND true)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1
POSTHOOK: Input: default@test2
#### A masked pattern was here ####
NULL	NULL	NULL	104	3	Fli
99	2	Mat	102	2	Del
101	2	Car	102	2	Del
99	2	Mat	103	2	Ema
101	2	Car	103	2	Ema
NULL	NULL	NULL	105	NULL	None
Warning: Map Join MAPJOIN[9][bigTable=?] in task 'Map 1' is a cross product
PREHOOK: query: -- Condition on one input (left outer join)
EXPLAIN
SELECT *
FROM test1 LEFT OUTER JOIN test2
ON (test1.key between 100 and 102)
PREHOOK: type: QUERY
POSTHOOK: query: -- Condition on one input (left outer join)
EXPLAIN
SELECT *
FROM test1 LEFT OUTER JOIN test2
ON (test1.key between 100 and 102)
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 2 (BROADCAST_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Map 1
      File Output Operator [FS_8]
        Map Join Operator [MAPJOIN_9] (rows=24 width=19)
          Conds:(Left Outer),Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
        <-Map 2 [BROADCAST_EDGE]
          BROADCAST [RS_5]
            Select Operator [SEL_3] (rows=4 width=9)
              Output:["_col0","_col1","_col2"]
              TableScan [TS_2] (rows=4 width=9)
                default@test2,test2,Tbl:COMPLETE,Col:NONE,Output:["key","value","col_2"]
        <-Select Operator [SEL_1] (rows=6 width=9)
            Output:["_col0","_col1","_col2"]
            TableScan [TS_0] (rows=6 width=9)
              default@test1,test1,Tbl:COMPLETE,Col:NONE,Output:["key","value","col_1"]

Warning: Map Join MAPJOIN[9][bigTable=?] in task 'Map 1' is a cross product
PREHOOK: query: SELECT *
FROM test1 LEFT OUTER JOIN test2
ON (test1.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1
PREHOOK: Input: default@test2
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1 LEFT OUTER JOIN test2
ON (test1.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1
POSTHOOK: Input: default@test2
#### A masked pattern was here ####
NULL	NULL	None	NULL	NULL	NULL
98	NULL	None	NULL	NULL	NULL
99	0	Alice	NULL	NULL	NULL
99	2	Mat	NULL	NULL	NULL
100	1	Bob	102	2	Del
100	1	Bob	105	NULL	None
100	1	Bob	104	3	Fli
100	1	Bob	103	2	Ema
101	2	Car	102	2	Del
101	2	Car	105	NULL	None
101	2	Car	104	3	Fli
101	2	Car	103	2	Ema
Warning: Map Join MAPJOIN[9][bigTable=?] in task 'Map 1' is a cross product
PREHOOK: query: -- Disjunction with pred on multiple inputs and single inputs (left outer join)
EXPLAIN
SELECT *
FROM test1 LEFT OUTER JOIN test2
ON (test1.value=test2.value
  OR test1.key between 100 and 102
  OR test2.key between 100 and 102)
PREHOOK: type: QUERY
POSTHOOK: query: -- Disjunction with pred on multiple inputs and single inputs (left outer join)
EXPLAIN
SELECT *
FROM test1 LEFT OUTER JOIN test2
ON (test1.value=test2.value
  OR test1.key between 100 and 102
  OR test2.key between 100 and 102)
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 2 (BROADCAST_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Map 1
      File Output Operator [FS_8]
        Map Join Operator [MAPJOIN_9] (rows=24 width=19)
          Conds:(Left Outer),Output:["_col0","_col1","_col2","_col3","_col4","_col5"],residual filter predicates:{((_col1 = _col4) or _col0 BETWEEN 100 AND 102 or _col3 BETWEEN 100 AND 102)}
        <-Map 2 [BROADCAST_EDGE]
          BROADCAST [RS_5]
            Select Operator [SEL_3] (rows=4 width=9)
              Output:["_col0","_col1","_col2"]
              TableScan [TS_2] (rows=4 width=9)
                default@test2,test2,Tbl:COMPLETE,Col:NONE,Output:["key","value","col_2"]
        <-Select Operator [SEL_1] (rows=6 width=9)
            Output:["_col0","_col1","_col2"]
            TableScan [TS_0] (rows=6 width=9)
              default@test1,test1,Tbl:COMPLETE,Col:NONE,Output:["key","value","col_1"]

Warning: Map Join MAPJOIN[9][bigTable=?] in task 'Map 1' is a cross product
PREHOOK: query: SELECT *
FROM test1 LEFT OUTER JOIN test2
ON (test1.value=test2.value
  OR test1.key between 100 and 102
  OR test2.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1
PREHOOK: Input: default@test2
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1 LEFT OUTER JOIN test2
ON (test1.value=test2.value
  OR test1.key between 100 and 102
  OR test2.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1
POSTHOOK: Input: default@test2
#### A masked pattern was here ####
NULL	NULL	None	102	2	Del
98	NULL	None	102	2	Del
99	0	Alice	102	2	Del
99	2	Mat	102	2	Del
99	2	Mat	103	2	Ema
100	1	Bob	102	2	Del
100	1	Bob	105	NULL	None
100	1	Bob	104	3	Fli
100	1	Bob	103	2	Ema
101	2	Car	102	2	Del
101	2	Car	105	NULL	None
101	2	Car	104	3	Fli
101	2	Car	103	2	Ema
Warning: Map Join MAPJOIN[9][bigTable=?] in task 'Map 1' is a cross product
PREHOOK: query: -- Disjunction with pred on multiple inputs and left input (left outer join)
EXPLAIN
SELECT *
FROM test1 LEFT OUTER JOIN test2
ON (test1.value=test2.value
  OR test1.key between 100 and 102)
PREHOOK: type: QUERY
POSTHOOK: query: -- Disjunction with pred on multiple inputs and left input (left outer join)
EXPLAIN
SELECT *
FROM test1 LEFT OUTER JOIN test2
ON (test1.value=test2.value
  OR test1.key between 100 and 102)
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 2 (BROADCAST_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Map 1
      File Output Operator [FS_8]
        Map Join Operator [MAPJOIN_9] (rows=24 width=19)
          Conds:(Left Outer),Output:["_col0","_col1","_col2","_col3","_col4","_col5"],residual filter predicates:{((_col1 = _col4) or _col0 BETWEEN 100 AND 102)}
        <-Map 2 [BROADCAST_EDGE]
          BROADCAST [RS_5]
            Select Operator [SEL_3] (rows=4 width=9)
              Output:["_col0","_col1","_col2"]
              TableScan [TS_2] (rows=4 width=9)
                default@test2,test2,Tbl:COMPLETE,Col:NONE,Output:["key","value","col_2"]
        <-Select Operator [SEL_1] (rows=6 width=9)
            Output:["_col0","_col1","_col2"]
            TableScan [TS_0] (rows=6 width=9)
              default@test1,test1,Tbl:COMPLETE,Col:NONE,Output:["key","value","col_1"]

Warning: Map Join MAPJOIN[9][bigTable=?] in task 'Map 1' is a cross product
PREHOOK: query: SELECT *
FROM test1 LEFT OUTER JOIN test2
ON (test1.value=test2.value
  OR test1.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1
PREHOOK: Input: default@test2
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1 LEFT OUTER JOIN test2
ON (test1.value=test2.value
  OR test1.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1
POSTHOOK: Input: default@test2
#### A masked pattern was here ####
NULL	NULL	None	NULL	NULL	NULL
98	NULL	None	NULL	NULL	NULL
99	0	Alice	NULL	NULL	NULL
99	2	Mat	102	2	Del
99	2	Mat	103	2	Ema
100	1	Bob	102	2	Del
100	1	Bob	105	NULL	None
100	1	Bob	104	3	Fli
100	1	Bob	103	2	Ema
101	2	Car	102	2	Del
101	2	Car	105	NULL	None
101	2	Car	104	3	Fli
101	2	Car	103	2	Ema
Warning: Map Join MAPJOIN[9][bigTable=?] in task 'Map 1' is a cross product
PREHOOK: query: -- Disjunction with pred on multiple inputs and right input (left outer join)
EXPLAIN
SELECT *
FROM test1 LEFT OUTER JOIN test2
ON (test1.value=test2.value
  OR test2.key between 100 and 102)
PREHOOK: type: QUERY
POSTHOOK: query: -- Disjunction with pred on multiple inputs and right input (left outer join)
EXPLAIN
SELECT *
FROM test1 LEFT OUTER JOIN test2
ON (test1.value=test2.value
  OR test2.key between 100 and 102)
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 2 (BROADCAST_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Map 1
      File Output Operator [FS_8]
        Map Join Operator [MAPJOIN_9] (rows=24 width=19)
          Conds:(Left Outer),Output:["_col0","_col1","_col2","_col3","_col4","_col5"],residual filter predicates:{((_col1 = _col4) or _col3 BETWEEN 100 AND 102)}
        <-Map 2 [BROADCAST_EDGE]
          BROADCAST [RS_5]
            Select Operator [SEL_3] (rows=4 width=9)
              Output:["_col0","_col1","_col2"]
              TableScan [TS_2] (rows=4 width=9)
                default@test2,test2,Tbl:COMPLETE,Col:NONE,Output:["key","value","col_2"]
        <-Select Operator [SEL_1] (rows=6 width=9)
            Output:["_col0","_col1","_col2"]
            TableScan [TS_0] (rows=6 width=9)
              default@test1,test1,Tbl:COMPLETE,Col:NONE,Output:["key","value","col_1"]

Warning: Map Join MAPJOIN[9][bigTable=?] in task 'Map 1' is a cross product
PREHOOK: query: SELECT *
FROM test1 LEFT OUTER JOIN test2
ON (test1.value=test2.value
  OR test2.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1
PREHOOK: Input: default@test2
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1 LEFT OUTER JOIN test2
ON (test1.value=test2.value
  OR test2.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1
POSTHOOK: Input: default@test2
#### A masked pattern was here ####
NULL	NULL	None	102	2	Del
98	NULL	None	102	2	Del
99	0	Alice	102	2	Del
99	2	Mat	102	2	Del
99	2	Mat	103	2	Ema
100	1	Bob	102	2	Del
101	2	Car	102	2	Del
101	2	Car	103	2	Ema
PREHOOK: query: -- Keys plus residual (left outer join)
EXPLAIN
SELECT *
FROM test1 LEFT OUTER JOIN test2
ON (test1.value=test2.value
  AND (test1.key between 100 and 102
    OR test2.key between 100 and 102))
PREHOOK: type: QUERY
POSTHOOK: query: -- Keys plus residual (left outer join)
EXPLAIN
SELECT *
FROM test1 LEFT OUTER JOIN test2
ON (test1.value=test2.value
  AND (test1.key between 100 and 102
    OR test2.key between 100 and 102))
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 1 <- Map 2 (BROADCAST_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Map 1
      File Output Operator [FS_8]
        Map Join Operator [MAPJOIN_11] (rows=6 width=10)
          Conds:SEL_1._col1=RS_5._col1(Left Outer),HybridGraceHashJoin:true,Output:["_col0","_col1","_col2","_col3","_col4","_col5"],residual filter predicates:{(_col0 BETWEEN 100 AND 102 or _col3 BETWEEN 100 AND 102)}
        <-Map 2 [BROADCAST_EDGE]
          BROADCAST [RS_5]
            PartitionCols:_col1
            Select Operator [SEL_3] (rows=4 width=9)
              Output:["_col0","_col1","_col2"]
              TableScan [TS_2] (rows=4 width=9)
                default@test2,test2,Tbl:COMPLETE,Col:NONE,Output:["key","value","col_2"]
        <-Select Operator [SEL_1] (rows=6 width=9)
            Output:["_col0","_col1","_col2"]
            TableScan [TS_0] (rows=6 width=9)
              default@test1,test1,Tbl:COMPLETE,Col:NONE,Output:["key","value","col_1"]

PREHOOK: query: SELECT *
FROM test1 LEFT OUTER JOIN test2
ON (test1.value=test2.value
  AND (test1.key between 100 and 102
    OR test2.key between 100 and 102))
PREHOOK: type: QUERY
PREHOOK: Input: default@test1
PREHOOK: Input: default@test2
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1 LEFT OUTER JOIN test2
ON (test1.value=test2.value
  AND (test1.key between 100 and 102
    OR test2.key between 100 and 102))
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1
POSTHOOK: Input: default@test2
#### A masked pattern was here ####
NULL	NULL	None	NULL	NULL	NULL
98	NULL	None	NULL	NULL	NULL
99	0	Alice	NULL	NULL	NULL
99	2	Mat	102	2	Del
100	1	Bob	NULL	NULL	NULL
101	2	Car	102	2	Del
101	2	Car	103	2	Ema
Warning: Map Join MAPJOIN[9][bigTable=?] in task 'Map 2' is a cross product
PREHOOK: query: -- Disjunction with pred on multiple inputs and single inputs (right outer join)
EXPLAIN
SELECT *
FROM test1 RIGHT OUTER JOIN test2
ON (test1.value=test2.value
  OR test1.key between 100 and 102
  OR test2.key between 100 and 102)
PREHOOK: type: QUERY
POSTHOOK: query: -- Disjunction with pred on multiple inputs and single inputs (right outer join)
EXPLAIN
SELECT *
FROM test1 RIGHT OUTER JOIN test2
ON (test1.value=test2.value
  OR test1.key between 100 and 102
  OR test2.key between 100 and 102)
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 2 <- Map 1 (BROADCAST_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Map 2
      File Output Operator [FS_8]
        Map Join Operator [MAPJOIN_9] (rows=24 width=19)
          Conds:(Right Outer),Output:["_col0","_col1","_col2","_col3","_col4","_col5"],residual filter predicates:{((_col1 = _col4) or _col0 BETWEEN 100 AND 102 or _col3 BETWEEN 100 AND 102)}
        <-Map 1 [BROADCAST_EDGE]
          BROADCAST [RS_4]
            Select Operator [SEL_1] (rows=6 width=9)
              Output:["_col0","_col1","_col2"]
              TableScan [TS_0] (rows=6 width=9)
                default@test1,test1,Tbl:COMPLETE,Col:NONE,Output:["key","value","col_1"]
        <-Select Operator [SEL_3] (rows=4 width=9)
            Output:["_col0","_col1","_col2"]
            TableScan [TS_2] (rows=4 width=9)
              default@test2,test2,Tbl:COMPLETE,Col:NONE,Output:["key","value","col_2"]

Warning: Map Join MAPJOIN[9][bigTable=?] in task 'Map 2' is a cross product
PREHOOK: query: SELECT *
FROM test1 RIGHT OUTER JOIN test2
ON (test1.value=test2.value
  OR test1.key between 100 and 102
  OR test2.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1
PREHOOK: Input: default@test2
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1 RIGHT OUTER JOIN test2
ON (test1.value=test2.value
  OR test1.key between 100 and 102
  OR test2.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1
POSTHOOK: Input: default@test2
#### A masked pattern was here ####
NULL	NULL	None	102	2	Del
101	2	Car	102	2	Del
100	1	Bob	102	2	Del
99	2	Mat	102	2	Del
99	0	Alice	102	2	Del
98	NULL	None	102	2	Del
101	2	Car	103	2	Ema
100	1	Bob	103	2	Ema
99	2	Mat	103	2	Ema
101	2	Car	104	3	Fli
100	1	Bob	104	3	Fli
101	2	Car	105	NULL	None
100	1	Bob	105	NULL	None
Warning: Map Join MAPJOIN[9][bigTable=?] in task 'Map 2' is a cross product
PREHOOK: query: -- Disjunction with pred on multiple inputs and left input (right outer join)
EXPLAIN
SELECT *
FROM test1 RIGHT OUTER JOIN test2
ON (test1.value=test2.value
  OR test1.key between 100 and 102)
PREHOOK: type: QUERY
POSTHOOK: query: -- Disjunction with pred on multiple inputs and left input (right outer join)
EXPLAIN
SELECT *
FROM test1 RIGHT OUTER JOIN test2
ON (test1.value=test2.value
  OR test1.key between 100 and 102)
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 2 <- Map 1 (BROADCAST_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Map 2
      File Output Operator [FS_8]
        Map Join Operator [MAPJOIN_9] (rows=24 width=19)
          Conds:(Right Outer),Output:["_col0","_col1","_col2","_col3","_col4","_col5"],residual filter predicates:{((_col1 = _col4) or _col0 BETWEEN 100 AND 102)}
        <-Map 1 [BROADCAST_EDGE]
          BROADCAST [RS_4]
            Select Operator [SEL_1] (rows=6 width=9)
              Output:["_col0","_col1","_col2"]
              TableScan [TS_0] (rows=6 width=9)
                default@test1,test1,Tbl:COMPLETE,Col:NONE,Output:["key","value","col_1"]
        <-Select Operator [SEL_3] (rows=4 width=9)
            Output:["_col0","_col1","_col2"]
            TableScan [TS_2] (rows=4 width=9)
              default@test2,test2,Tbl:COMPLETE,Col:NONE,Output:["key","value","col_2"]

Warning: Map Join MAPJOIN[9][bigTable=?] in task 'Map 2' is a cross product
PREHOOK: query: SELECT *
FROM test1 RIGHT OUTER JOIN test2
ON (test1.value=test2.value
  OR test1.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1
PREHOOK: Input: default@test2
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1 RIGHT OUTER JOIN test2
ON (test1.value=test2.value
  OR test1.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1
POSTHOOK: Input: default@test2
#### A masked pattern was here ####
101	2	Car	102	2	Del
100	1	Bob	102	2	Del
99	2	Mat	102	2	Del
101	2	Car	103	2	Ema
100	1	Bob	103	2	Ema
99	2	Mat	103	2	Ema
101	2	Car	104	3	Fli
100	1	Bob	104	3	Fli
101	2	Car	105	NULL	None
100	1	Bob	105	NULL	None
Warning: Map Join MAPJOIN[9][bigTable=?] in task 'Map 2' is a cross product
PREHOOK: query: -- Disjunction with pred on multiple inputs and right input (right outer join)
EXPLAIN
SELECT *
FROM test1 RIGHT OUTER JOIN test2
ON (test1.value=test2.value
  OR test2.key between 100 and 102)
PREHOOK: type: QUERY
POSTHOOK: query: -- Disjunction with pred on multiple inputs and right input (right outer join)
EXPLAIN
SELECT *
FROM test1 RIGHT OUTER JOIN test2
ON (test1.value=test2.value
  OR test2.key between 100 and 102)
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 2 <- Map 1 (BROADCAST_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Map 2
      File Output Operator [FS_8]
        Map Join Operator [MAPJOIN_9] (rows=24 width=19)
          Conds:(Right Outer),Output:["_col0","_col1","_col2","_col3","_col4","_col5"],residual filter predicates:{((_col1 = _col4) or _col3 BETWEEN 100 AND 102)}
        <-Map 1 [BROADCAST_EDGE]
          BROADCAST [RS_4]
            Select Operator [SEL_1] (rows=6 width=9)
              Output:["_col0","_col1","_col2"]
              TableScan [TS_0] (rows=6 width=9)
                default@test1,test1,Tbl:COMPLETE,Col:NONE,Output:["key","value","col_1"]
        <-Select Operator [SEL_3] (rows=4 width=9)
            Output:["_col0","_col1","_col2"]
            TableScan [TS_2] (rows=4 width=9)
              default@test2,test2,Tbl:COMPLETE,Col:NONE,Output:["key","value","col_2"]

Warning: Map Join MAPJOIN[9][bigTable=?] in task 'Map 2' is a cross product
PREHOOK: query: SELECT *
FROM test1 RIGHT OUTER JOIN test2
ON (test1.value=test2.value
  OR test2.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1
PREHOOK: Input: default@test2
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1 RIGHT OUTER JOIN test2
ON (test1.value=test2.value
  OR test2.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1
POSTHOOK: Input: default@test2
#### A masked pattern was here ####
NULL	NULL	None	102	2	Del
101	2	Car	102	2	Del
100	1	Bob	102	2	Del
99	2	Mat	102	2	Del
99	0	Alice	102	2	Del
98	NULL	None	102	2	Del
101	2	Car	103	2	Ema
99	2	Mat	103	2	Ema
NULL	NULL	NULL	104	3	Fli
NULL	NULL	NULL	105	NULL	None
PREHOOK: query: -- Keys plus residual (right outer join)
EXPLAIN
SELECT *
FROM test1 RIGHT OUTER JOIN test2
ON (test1.value=test2.value
  AND (test1.key between 100 and 102
    OR test2.key between 100 and 102))
PREHOOK: type: QUERY
POSTHOOK: query: -- Keys plus residual (right outer join)
EXPLAIN
SELECT *
FROM test1 RIGHT OUTER JOIN test2
ON (test1.value=test2.value
  AND (test1.key between 100 and 102
    OR test2.key between 100 and 102))
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 2 <- Map 1 (BROADCAST_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Map 2
      File Output Operator [FS_8]
        Map Join Operator [MAPJOIN_11] (rows=6 width=10)
          Conds:RS_4._col1=SEL_3._col1(Right Outer),HybridGraceHashJoin:true,Output:["_col0","_col1","_col2","_col3","_col4","_col5"],residual filter predicates:{(_col0 BETWEEN 100 AND 102 or _col3 BETWEEN 100 AND 102)}
        <-Map 1 [BROADCAST_EDGE]
          BROADCAST [RS_4]
            PartitionCols:_col1
            Select Operator [SEL_1] (rows=6 width=9)
              Output:["_col0","_col1","_col2"]
              TableScan [TS_0] (rows=6 width=9)
                default@test1,test1,Tbl:COMPLETE,Col:NONE,Output:["key","value","col_1"]
        <-Select Operator [SEL_3] (rows=4 width=9)
            Output:["_col0","_col1","_col2"]
            TableScan [TS_2] (rows=4 width=9)
              default@test2,test2,Tbl:COMPLETE,Col:NONE,Output:["key","value","col_2"]

PREHOOK: query: SELECT *
FROM test1 RIGHT OUTER JOIN test2
ON (test1.value=test2.value
  AND (test1.key between 100 and 102
    OR test2.key between 100 and 102))
PREHOOK: type: QUERY
PREHOOK: Input: default@test1
PREHOOK: Input: default@test2
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1 RIGHT OUTER JOIN test2
ON (test1.value=test2.value
  AND (test1.key between 100 and 102
    OR test2.key between 100 and 102))
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1
POSTHOOK: Input: default@test2
#### A masked pattern was here ####
NULL	NULL	NULL	104	3	Fli
99	2	Mat	102	2	Del
101	2	Car	102	2	Del
101	2	Car	103	2	Ema
NULL	NULL	NULL	105	NULL	None
Warning: Shuffle Join MERGEJOIN[9][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: -- Disjunction with pred on multiple inputs and single inputs (full outer join)
EXPLAIN
SELECT *
FROM test1 FULL OUTER JOIN test2
ON (test1.value=test2.value
  OR test1.key between 100 and 102
  OR test2.key between 100 and 102)
PREHOOK: type: QUERY
POSTHOOK: query: -- Disjunction with pred on multiple inputs and single inputs (full outer join)
EXPLAIN
SELECT *
FROM test1 FULL OUTER JOIN test2
ON (test1.value=test2.value
  OR test1.key between 100 and 102
  OR test2.key between 100 and 102)
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 3 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 2
      File Output Operator [FS_8]
        Merge Join Operator [MERGEJOIN_9] (rows=24 width=19)
          Conds:(Outer),Output:["_col0","_col1","_col2","_col3","_col4","_col5"],residual filter predicates:{((_col1 = _col4) or _col0 BETWEEN 100 AND 102 or _col3 BETWEEN 100 AND 102)}
        <-Map 1 [SIMPLE_EDGE]
          SHUFFLE [RS_4]
            Select Operator [SEL_1] (rows=6 width=9)
              Output:["_col0","_col1","_col2"]
              TableScan [TS_0] (rows=6 width=9)
                default@test1,test1,Tbl:COMPLETE,Col:NONE,Output:["key","value","col_1"]
        <-Map 3 [SIMPLE_EDGE]
          SHUFFLE [RS_5]
            Select Operator [SEL_3] (rows=4 width=9)
              Output:["_col0","_col1","_col2"]
              TableScan [TS_2] (rows=4 width=9)
                default@test2,test2,Tbl:COMPLETE,Col:NONE,Output:["key","value","col_2"]

Warning: Shuffle Join MERGEJOIN[9][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: SELECT *
FROM test1 FULL OUTER JOIN test2
ON (test1.value=test2.value
  OR test1.key between 100 and 102
  OR test2.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1
PREHOOK: Input: default@test2
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1 FULL OUTER JOIN test2
ON (test1.value=test2.value
  OR test1.key between 100 and 102
  OR test2.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1
POSTHOOK: Input: default@test2
#### A masked pattern was here ####
NULL	NULL	None	102	2	Del
98	NULL	None	102	2	Del
99	0	Alice	102	2	Del
99	2	Mat	102	2	Del
99	2	Mat	103	2	Ema
100	1	Bob	102	2	Del
100	1	Bob	103	2	Ema
100	1	Bob	104	3	Fli
100	1	Bob	105	NULL	None
101	2	Car	102	2	Del
101	2	Car	103	2	Ema
101	2	Car	104	3	Fli
101	2	Car	105	NULL	None
Warning: Shuffle Join MERGEJOIN[9][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: -- Disjunction with pred on multiple inputs and left input (full outer join)
EXPLAIN
SELECT *
FROM test1 FULL OUTER JOIN test2
ON (test1.value=test2.value
  OR test1.key between 100 and 102)
PREHOOK: type: QUERY
POSTHOOK: query: -- Disjunction with pred on multiple inputs and left input (full outer join)
EXPLAIN
SELECT *
FROM test1 FULL OUTER JOIN test2
ON (test1.value=test2.value
  OR test1.key between 100 and 102)
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 3 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 2
      File Output Operator [FS_8]
        Merge Join Operator [MERGEJOIN_9] (rows=24 width=19)
          Conds:(Outer),Output:["_col0","_col1","_col2","_col3","_col4","_col5"],residual filter predicates:{((_col1 = _col4) or _col0 BETWEEN 100 AND 102)}
        <-Map 1 [SIMPLE_EDGE]
          SHUFFLE [RS_4]
            Select Operator [SEL_1] (rows=6 width=9)
              Output:["_col0","_col1","_col2"]
              TableScan [TS_0] (rows=6 width=9)
                default@test1,test1,Tbl:COMPLETE,Col:NONE,Output:["key","value","col_1"]
        <-Map 3 [SIMPLE_EDGE]
          SHUFFLE [RS_5]
            Select Operator [SEL_3] (rows=4 width=9)
              Output:["_col0","_col1","_col2"]
              TableScan [TS_2] (rows=4 width=9)
                default@test2,test2,Tbl:COMPLETE,Col:NONE,Output:["key","value","col_2"]

Warning: Shuffle Join MERGEJOIN[9][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: SELECT *
FROM test1 FULL OUTER JOIN test2
ON (test1.value=test2.value
  OR test1.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1
PREHOOK: Input: default@test2
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1 FULL OUTER JOIN test2
ON (test1.value=test2.value
  OR test1.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1
POSTHOOK: Input: default@test2
#### A masked pattern was here ####
NULL	NULL	None	NULL	NULL	NULL
98	NULL	None	NULL	NULL	NULL
99	0	Alice	NULL	NULL	NULL
99	2	Mat	102	2	Del
99	2	Mat	103	2	Ema
100	1	Bob	102	2	Del
100	1	Bob	103	2	Ema
100	1	Bob	104	3	Fli
100	1	Bob	105	NULL	None
101	2	Car	102	2	Del
101	2	Car	103	2	Ema
101	2	Car	104	3	Fli
101	2	Car	105	NULL	None
Warning: Shuffle Join MERGEJOIN[9][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: -- Disjunction with pred on multiple inputs and right input (full outer join)
EXPLAIN
SELECT *
FROM test1 FULL OUTER JOIN test2
ON (test1.value=test2.value
  OR test2.key between 100 and 102)
PREHOOK: type: QUERY
POSTHOOK: query: -- Disjunction with pred on multiple inputs and right input (full outer join)
EXPLAIN
SELECT *
FROM test1 FULL OUTER JOIN test2
ON (test1.value=test2.value
  OR test2.key between 100 and 102)
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 3 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 2
      File Output Operator [FS_8]
        Merge Join Operator [MERGEJOIN_9] (rows=24 width=19)
          Conds:(Outer),Output:["_col0","_col1","_col2","_col3","_col4","_col5"],residual filter predicates:{((_col1 = _col4) or _col3 BETWEEN 100 AND 102)}
        <-Map 1 [SIMPLE_EDGE]
          SHUFFLE [RS_4]
            Select Operator [SEL_1] (rows=6 width=9)
              Output:["_col0","_col1","_col2"]
              TableScan [TS_0] (rows=6 width=9)
                default@test1,test1,Tbl:COMPLETE,Col:NONE,Output:["key","value","col_1"]
        <-Map 3 [SIMPLE_EDGE]
          SHUFFLE [RS_5]
            Select Operator [SEL_3] (rows=4 width=9)
              Output:["_col0","_col1","_col2"]
              TableScan [TS_2] (rows=4 width=9)
                default@test2,test2,Tbl:COMPLETE,Col:NONE,Output:["key","value","col_2"]

Warning: Shuffle Join MERGEJOIN[9][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: SELECT *
FROM test1 FULL OUTER JOIN test2
ON (test1.value=test2.value
  OR test2.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1
PREHOOK: Input: default@test2
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1 FULL OUTER JOIN test2
ON (test1.value=test2.value
  OR test2.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1
POSTHOOK: Input: default@test2
#### A masked pattern was here ####
NULL	NULL	None	102	2	Del
98	NULL	None	102	2	Del
99	0	Alice	102	2	Del
99	2	Mat	102	2	Del
99	2	Mat	103	2	Ema
100	1	Bob	102	2	Del
101	2	Car	102	2	Del
101	2	Car	103	2	Ema
NULL	NULL	NULL	104	3	Fli
NULL	NULL	NULL	105	NULL	None
PREHOOK: query: -- Keys plus residual (full outer join)
EXPLAIN
SELECT *
FROM test1 FULL OUTER JOIN test2
ON (test1.value=test2.value
  AND (test1.key between 100 and 102
    OR test2.key between 100 and 102))
PREHOOK: type: QUERY
POSTHOOK: query: -- Keys plus residual (full outer join)
EXPLAIN
SELECT *
FROM test1 FULL OUTER JOIN test2
ON (test1.value=test2.value
  AND (test1.key between 100 and 102
    OR test2.key between 100 and 102))
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 3 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 2
      File Output Operator [FS_8]
        Merge Join Operator [MERGEJOIN_9] (rows=6 width=10)
          Conds:RS_4._col1=RS_5._col1(Outer),Output:["_col0","_col1","_col2","_col3","_col4","_col5"],residual filter predicates:{(_col0 BETWEEN 100 AND 102 or _col3 BETWEEN 100 AND 102)}
        <-Map 1 [SIMPLE_EDGE]
          SHUFFLE [RS_4]
            PartitionCols:_col1
            Select Operator [SEL_1] (rows=6 width=9)
              Output:["_col0","_col1","_col2"]
              TableScan [TS_0] (rows=6 width=9)
                default@test1,test1,Tbl:COMPLETE,Col:NONE,Output:["key","value","col_1"]
        <-Map 3 [SIMPLE_EDGE]
          SHUFFLE [RS_5]
            PartitionCols:_col1
            Select Operator [SEL_3] (rows=4 width=9)
              Output:["_col0","_col1","_col2"]
              TableScan [TS_2] (rows=4 width=9)
                default@test2,test2,Tbl:COMPLETE,Col:NONE,Output:["key","value","col_2"]

PREHOOK: query: SELECT *
FROM test1 FULL OUTER JOIN test2
ON (test1.value=test2.value
  AND (test1.key between 100 and 102
    OR test2.key between 100 and 102))
PREHOOK: type: QUERY
PREHOOK: Input: default@test1
PREHOOK: Input: default@test2
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1 FULL OUTER JOIN test2
ON (test1.value=test2.value
  AND (test1.key between 100 and 102
    OR test2.key between 100 and 102))
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1
POSTHOOK: Input: default@test2
#### A masked pattern was here ####
NULL	NULL	NULL	105	NULL	None
NULL	NULL	None	NULL	NULL	NULL
98	NULL	None	NULL	NULL	NULL
99	0	Alice	NULL	NULL	NULL
100	1	Bob	NULL	NULL	NULL
99	2	Mat	102	2	Del
101	2	Car	102	2	Del
101	2	Car	103	2	Ema
NULL	NULL	NULL	104	3	Fli
Warning: Shuffle Join MERGEJOIN[26][tables = [$hdt$_0, $hdt$_1, $hdt$_2]] in Stage 'Reducer 3' is a cross product
PREHOOK: query: -- Mixed ( FOJ (ROJ, LOJ) ) 
EXPLAIN
SELECT *
FROM (
  SELECT test1.key AS key1, test1.value AS value1, test1.col_1 AS col_1,
         test2.key AS key2, test2.value AS value2, test2.col_2 AS col_2
  FROM test1 RIGHT OUTER JOIN test2
  ON (test1.value=test2.value
    AND (test1.key between 100 and 102
      OR test2.key between 100 and 102))
  ) sq1
FULL OUTER JOIN (
  SELECT test1.key AS key3, test1.value AS value3, test1.col_1 AS col_3,
         test2.key AS key4, test2.value AS value4, test2.col_2 AS col_4
  FROM test1 LEFT OUTER JOIN test2
  ON (test1.value=test2.value
    AND (test1.key between 100 and 102
      OR test2.key between 100 and 102))
  ) sq2
ON (sq1.value1 is null or sq2.value4 is null and sq2.value3 != sq1.value2)
PREHOOK: type: QUERY
POSTHOOK: query: -- Mixed ( FOJ (ROJ, LOJ) ) 
EXPLAIN
SELECT *
FROM (
  SELECT test1.key AS key1, test1.value AS value1, test1.col_1 AS col_1,
         test2.key AS key2, test2.value AS value2, test2.col_2 AS col_2
  FROM test1 RIGHT OUTER JOIN test2
  ON (test1.value=test2.value
    AND (test1.key between 100 and 102
      OR test2.key between 100 and 102))
  ) sq1
FULL OUTER JOIN (
  SELECT test1.key AS key3, test1.value AS value3, test1.col_1 AS col_3,
         test2.key AS key4, test2.value AS value4, test2.col_2 AS col_4
  FROM test1 LEFT OUTER JOIN test2
  ON (test1.value=test2.value
    AND (test1.key between 100 and 102
      OR test2.key between 100 and 102))
  ) sq2
ON (sq1.value1 is null or sq2.value4 is null and sq2.value3 != sq1.value2)
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Map 2 <- Map 1 (BROADCAST_EDGE)
Map 4 <- Map 5 (BROADCAST_EDGE)
Reducer 3 <- Map 2 (SIMPLE_EDGE), Map 4 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 3
      File Output Operator [FS_19]
        Merge Join Operator [MERGEJOIN_26] (rows=36 width=21)
          Conds:(Outer),Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7","_col8","_col9","_col10","_col11"],residual filter predicates:{(_col1 is null or (_col10 is null and (_col7 <> _col4)))}
        <-Map 2 [SIMPLE_EDGE]
          SHUFFLE [RS_15]
            Map Join Operator [MAPJOIN_24] (rows=6 width=10)
              Conds:RS_12._col1=SEL_3._col1(Right Outer),HybridGraceHashJoin:true,Output:["_col0","_col1","_col2","_col3","_col4","_col5"],residual filter predicates:{(_col0 BETWEEN 100 AND 102 or _col3 BETWEEN 100 AND 102)}
            <-Map 1 [BROADCAST_EDGE]
              BROADCAST [RS_12]
                PartitionCols:_col1
                Select Operator [SEL_1] (rows=6 width=9)
                  Output:["_col0","_col1","_col2"]
                  TableScan [TS_0] (rows=6 width=9)
                    default@test1,test1,Tbl:COMPLETE,Col:NONE,Output:["key","value","col_1"]
            <-Select Operator [SEL_3] (rows=4 width=9)
                Output:["_col0","_col1","_col2"]
                TableScan [TS_2] (rows=4 width=9)
                  default@test2,test2,Tbl:COMPLETE,Col:NONE,Output:["key","value","col_2"]
        <-Map 4 [SIMPLE_EDGE]
          SHUFFLE [RS_16]
            Map Join Operator [MAPJOIN_25] (rows=6 width=10)
              Conds:SEL_5._col1=RS_9._col1(Left Outer),HybridGraceHashJoin:true,Output:["_col0","_col1","_col2","_col3","_col4","_col5"],residual filter predicates:{(_col0 BETWEEN 100 AND 102 or _col3 BETWEEN 100 AND 102)}
            <-Map 5 [BROADCAST_EDGE]
              BROADCAST [RS_9]
                PartitionCols:_col1
                Select Operator [SEL_7] (rows=4 width=9)
                  Output:["_col0","_col1","_col2"]
                  TableScan [TS_6] (rows=4 width=9)
                    default@test2,test2,Tbl:COMPLETE,Col:NONE,Output:["key","value","col_2"]
            <-Select Operator [SEL_5] (rows=6 width=9)
                Output:["_col0","_col1","_col2"]
                TableScan [TS_4] (rows=6 width=9)
                  default@test1,test1,Tbl:COMPLETE,Col:NONE,Output:["key","value","col_1"]

Warning: Shuffle Join MERGEJOIN[26][tables = [$hdt$_0, $hdt$_1, $hdt$_2]] in Stage 'Reducer 3' is a cross product
PREHOOK: query: SELECT *
FROM (
  SELECT test1.key AS key1, test1.value AS value1, test1.col_1 AS col_1,
         test2.key AS key2, test2.value AS value2, test2.col_2 AS col_2
  FROM test1 RIGHT OUTER JOIN test2
  ON (test1.value=test2.value
    AND (test1.key between 100 and 102
      OR test2.key between 100 and 102))
  ) sq1
FULL OUTER JOIN (
  SELECT test1.key AS key3, test1.value AS value3, test1.col_1 AS col_3,
         test2.key AS key4, test2.value AS value4, test2.col_2 AS col_4
  FROM test1 LEFT OUTER JOIN test2
  ON (test1.value=test2.value
    AND (test1.key between 100 and 102
      OR test2.key between 100 and 102))
  ) sq2
ON (sq1.value1 is null or sq2.value4 is null and sq2.value3 != sq1.value2)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1
PREHOOK: Input: default@test2
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM (
  SELECT test1.key AS key1, test1.value AS value1, test1.col_1 AS col_1,
         test2.key AS key2, test2.value AS value2, test2.col_2 AS col_2
  FROM test1 RIGHT OUTER JOIN test2
  ON (test1.value=test2.value
    AND (test1.key between 100 and 102
      OR test2.key between 100 and 102))
  ) sq1
FULL OUTER JOIN (
  SELECT test1.key AS key3, test1.value AS value3, test1.col_1 AS col_3,
         test2.key AS key4, test2.value AS value4, test2.col_2 AS col_4
  FROM test1 LEFT OUTER JOIN test2
  ON (test1.value=test2.value
    AND (test1.key between 100 and 102
      OR test2.key between 100 and 102))
  ) sq2
ON (sq1.value1 is null or sq2.value4 is null and sq2.value3 != sq1.value2)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1
POSTHOOK: Input: default@test2
#### A masked pattern was here ####
NULL	NULL	NULL	104	3	Fli	NULL	NULL	None	NULL	NULL	NULL
NULL	NULL	NULL	104	3	Fli	98	NULL	None	NULL	NULL	NULL
NULL	NULL	NULL	104	3	Fli	99	0	Alice	NULL	NULL	NULL
NULL	NULL	NULL	104	3	Fli	99	2	Mat	102	2	Del
NULL	NULL	NULL	104	3	Fli	100	1	Bob	NULL	NULL	NULL
NULL	NULL	NULL	104	3	Fli	101	2	Car	102	2	Del
NULL	NULL	NULL	104	3	Fli	101	2	Car	103	2	Ema
99	2	Mat	102	2	Del	99	0	Alice	NULL	NULL	NULL
99	2	Mat	102	2	Del	100	1	Bob	NULL	NULL	NULL
101	2	Car	102	2	Del	99	0	Alice	NULL	NULL	NULL
101	2	Car	102	2	Del	100	1	Bob	NULL	NULL	NULL
101	2	Car	103	2	Ema	99	0	Alice	NULL	NULL	NULL
101	2	Car	103	2	Ema	100	1	Bob	NULL	NULL	NULL
NULL	NULL	NULL	105	NULL	None	NULL	NULL	None	NULL	NULL	NULL
NULL	NULL	NULL	105	NULL	None	98	NULL	None	NULL	NULL	NULL
NULL	NULL	NULL	105	NULL	None	99	0	Alice	NULL	NULL	NULL
NULL	NULL	NULL	105	NULL	None	99	2	Mat	102	2	Del
NULL	NULL	NULL	105	NULL	None	100	1	Bob	NULL	NULL	NULL
NULL	NULL	NULL	105	NULL	None	101	2	Car	102	2	Del
NULL	NULL	NULL	105	NULL	None	101	2	Car	103	2	Ema
