PREHOOK: query: CREATE TABLE test1 (key INT, value INT, col_1 STRING)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@test1
POSTHOOK: query: CREATE TABLE test1 (key INT, value INT, col_1 STRING)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test1
PREHOOK: query: INSERT INTO test1 VALUES (NULL, NULL, 'None'), (98, NULL, 'None'),
    (99, 0, 'Alice'), (99, 2, 'Mat'), (100, 1, 'Bob'), (101, 2, 'Car')
PREHOOK: type: QUERY
PREHOOK: Input: default@values__tmp__table__1
PREHOOK: Output: default@test1
POSTHOOK: query: INSERT INTO test1 VALUES (NULL, NULL, 'None'), (98, NULL, 'None'),
    (99, 0, 'Alice'), (99, 2, 'Mat'), (100, 1, 'Bob'), (101, 2, 'Car')
POSTHOOK: type: QUERY
POSTHOOK: Input: default@values__tmp__table__1
POSTHOOK: Output: default@test1
POSTHOOK: Lineage: test1.col_1 SIMPLE [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col3, type:string, comment:), ]
POSTHOOK: Lineage: test1.key EXPRESSION [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col1, type:string, comment:), ]
POSTHOOK: Lineage: test1.value EXPRESSION [(values__tmp__table__1)values__tmp__table__1.FieldSchema(name:tmp_values_col2, type:string, comment:), ]
PREHOOK: query: CREATE TABLE test2 (key INT, value INT, col_2 STRING)
PREHOOK: type: CREATETABLE
PREHOOK: Output: database:default
PREHOOK: Output: default@test2
POSTHOOK: query: CREATE TABLE test2 (key INT, value INT, col_2 STRING)
POSTHOOK: type: CREATETABLE
POSTHOOK: Output: database:default
POSTHOOK: Output: default@test2
PREHOOK: query: INSERT INTO test2 VALUES (102, 2, 'Del'), (103, 2, 'Ema'),
    (104, 3, 'Fli'), (105, NULL, 'None')
PREHOOK: type: QUERY
PREHOOK: Input: default@values__tmp__table__2
PREHOOK: Output: default@test2
POSTHOOK: query: INSERT INTO test2 VALUES (102, 2, 'Del'), (103, 2, 'Ema'),
    (104, 3, 'Fli'), (105, NULL, 'None')
POSTHOOK: type: QUERY
POSTHOOK: Input: default@values__tmp__table__2
POSTHOOK: Output: default@test2
POSTHOOK: Lineage: test2.col_2 SIMPLE [(values__tmp__table__2)values__tmp__table__2.FieldSchema(name:tmp_values_col3, type:string, comment:), ]
POSTHOOK: Lineage: test2.key EXPRESSION [(values__tmp__table__2)values__tmp__table__2.FieldSchema(name:tmp_values_col1, type:string, comment:), ]
POSTHOOK: Lineage: test2.value EXPRESSION [(values__tmp__table__2)values__tmp__table__2.FieldSchema(name:tmp_values_col2, type:string, comment:), ]
PREHOOK: query: EXPLAIN
SELECT *
FROM test1 LEFT OUTER JOIN test2
ON (test1.value=test2.value AND test1.key between 100 and 102)
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
SELECT *
FROM test1 LEFT OUTER JOIN test2
ON (test1.value=test2.value AND test1.key between 100 and 102)
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 3 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 2
      File Output Operator [FS_8]
        Merge Join Operator [MERGEJOIN_11] (rows=6 width=10)
          Conds:RS_4._col1=RS_5._col1(Left Outer),Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
        <-Map 1 [SIMPLE_EDGE]
          SHUFFLE [RS_4]
            PartitionCols:_col1
            Select Operator [SEL_1] (rows=6 width=9)
              Output:["_col0","_col1","_col2"]
              TableScan [TS_0] (rows=6 width=9)
                default@test1,test1,Tbl:COMPLETE,Col:NONE,Output:["key","value","col_1"]
        <-Map 3 [SIMPLE_EDGE]
          SHUFFLE [RS_5]
            PartitionCols:_col1
            Select Operator [SEL_3] (rows=4 width=9)
              Output:["_col0","_col1","_col2"]
              TableScan [TS_2] (rows=4 width=9)
                default@test2,test2,Tbl:COMPLETE,Col:NONE,Output:["key","value","col_2"]

PREHOOK: query: SELECT *
FROM test1 LEFT OUTER JOIN test2
ON (test1.value=test2.value AND test1.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1
PREHOOK: Input: default@test2
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1 LEFT OUTER JOIN test2
ON (test1.value=test2.value AND test1.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1
POSTHOOK: Input: default@test2
#### A masked pattern was here ####
NULL	NULL	None	NULL	NULL	NULL
98	NULL	None	NULL	NULL	NULL
99	0	Alice	NULL	NULL	NULL
100	1	Bob	NULL	NULL	NULL
99	2	Mat	NULL	NULL	NULL
101	2	Car	102	2	Del
101	2	Car	103	2	Ema
Warning: Shuffle Join MERGEJOIN[9][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: EXPLAIN
SELECT *
FROM test1 LEFT OUTER JOIN test2
ON (test1.key between 100 and 102)
PREHOOK: type: QUERY
POSTHOOK: query: EXPLAIN
SELECT *
FROM test1 LEFT OUTER JOIN test2
ON (test1.key between 100 and 102)
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 3 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:-1
    Stage-1
      Reducer 2
      File Output Operator [FS_8]
        Merge Join Operator [MERGEJOIN_9] (rows=24 width=19)
          Conds:(Left Outer),Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
        <-Map 1 [SIMPLE_EDGE]
          SHUFFLE [RS_4]
            Select Operator [SEL_1] (rows=6 width=9)
              Output:["_col0","_col1","_col2"]
              TableScan [TS_0] (rows=6 width=9)
                default@test1,test1,Tbl:COMPLETE,Col:NONE,Output:["key","value","col_1"]
        <-Map 3 [SIMPLE_EDGE]
          SHUFFLE [RS_5]
            Select Operator [SEL_3] (rows=4 width=9)
              Output:["_col0","_col1","_col2"]
              TableScan [TS_2] (rows=4 width=9)
                default@test2,test2,Tbl:COMPLETE,Col:NONE,Output:["key","value","col_2"]

Warning: Shuffle Join MERGEJOIN[9][tables = [$hdt$_0, $hdt$_1]] in Stage 'Reducer 2' is a cross product
PREHOOK: query: SELECT *
FROM test1 LEFT OUTER JOIN test2
ON (test1.key between 100 and 102)
PREHOOK: type: QUERY
PREHOOK: Input: default@test1
PREHOOK: Input: default@test2
#### A masked pattern was here ####
POSTHOOK: query: SELECT *
FROM test1 LEFT OUTER JOIN test2
ON (test1.key between 100 and 102)
POSTHOOK: type: QUERY
POSTHOOK: Input: default@test1
POSTHOOK: Input: default@test2
#### A masked pattern was here ####
NULL	NULL	None	NULL	NULL	NULL
98	NULL	None	NULL	NULL	NULL
99	0	Alice	NULL	NULL	NULL
99	2	Mat	NULL	NULL	NULL
100	1	Bob	102	2	Del
100	1	Bob	103	2	Ema
100	1	Bob	104	3	Fli
100	1	Bob	105	NULL	None
101	2	Car	102	2	Del
101	2	Car	103	2	Ema
101	2	Car	104	3	Fli
101	2	Car	105	NULL	None
