PREHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(((ss_ext_list_price-ss_ext_wholesale_cost-ss_ext_discount_amt)+ss_ext_sales_price)/2) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((cs_ext_list_price-cs_ext_wholesale_cost-cs_ext_discount_amt)+cs_ext_sales_price)/2) ) year_total
       ,'c' sale_type
 from customer
     ,catalog_sales
     ,date_dim
 where c_customer_sk = cs_bill_customer_sk
   and cs_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((ws_ext_list_price-ws_ext_wholesale_cost-ws_ext_discount_amt)+ws_ext_sales_price)/2) ) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
         )
  select  t_s_secyear.customer_preferred_cust_flag
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_c_firstyear
     ,year_total t_c_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
   and t_s_firstyear.customer_id = t_c_secyear.customer_id
   and t_s_firstyear.customer_id = t_c_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_secyear.customer_id
   and t_s_firstyear.sale_type = 's'
   and t_c_firstyear.sale_type = 'c'
   and t_w_firstyear.sale_type = 'w'
   and t_s_secyear.sale_type = 's'
   and t_c_secyear.sale_type = 'c'
   and t_w_secyear.sale_type = 'w'
   and t_s_firstyear.dyear =  2001
   and t_s_secyear.dyear = 2001+1
   and t_c_firstyear.dyear =  2001
   and t_c_secyear.dyear =  2001+1
   and t_w_firstyear.dyear = 2001
   and t_w_secyear.dyear = 2001+1
   and t_s_firstyear.year_total > 0
   and t_c_firstyear.year_total > 0
   and t_w_firstyear.year_total > 0
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
 order by t_s_secyear.customer_preferred_cust_flag
limit 100
PREHOOK: type: QUERY
POSTHOOK: query: explain
with year_total as (
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum(((ss_ext_list_price-ss_ext_wholesale_cost-ss_ext_discount_amt)+ss_ext_sales_price)/2) year_total
       ,'s' sale_type
 from customer
     ,store_sales
     ,date_dim
 where c_customer_sk = ss_customer_sk
   and ss_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
 union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((cs_ext_list_price-cs_ext_wholesale_cost-cs_ext_discount_amt)+cs_ext_sales_price)/2) ) year_total
       ,'c' sale_type
 from customer
     ,catalog_sales
     ,date_dim
 where c_customer_sk = cs_bill_customer_sk
   and cs_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
union all
 select c_customer_id customer_id
       ,c_first_name customer_first_name
       ,c_last_name customer_last_name
       ,c_preferred_cust_flag customer_preferred_cust_flag
       ,c_birth_country customer_birth_country
       ,c_login customer_login
       ,c_email_address customer_email_address
       ,d_year dyear
       ,sum((((ws_ext_list_price-ws_ext_wholesale_cost-ws_ext_discount_amt)+ws_ext_sales_price)/2) ) year_total
       ,'w' sale_type
 from customer
     ,web_sales
     ,date_dim
 where c_customer_sk = ws_bill_customer_sk
   and ws_sold_date_sk = d_date_sk
 group by c_customer_id
         ,c_first_name
         ,c_last_name
         ,c_preferred_cust_flag
         ,c_birth_country
         ,c_login
         ,c_email_address
         ,d_year
         )
  select  t_s_secyear.customer_preferred_cust_flag
 from year_total t_s_firstyear
     ,year_total t_s_secyear
     ,year_total t_c_firstyear
     ,year_total t_c_secyear
     ,year_total t_w_firstyear
     ,year_total t_w_secyear
 where t_s_secyear.customer_id = t_s_firstyear.customer_id
   and t_s_firstyear.customer_id = t_c_secyear.customer_id
   and t_s_firstyear.customer_id = t_c_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_firstyear.customer_id
   and t_s_firstyear.customer_id = t_w_secyear.customer_id
   and t_s_firstyear.sale_type = 's'
   and t_c_firstyear.sale_type = 'c'
   and t_w_firstyear.sale_type = 'w'
   and t_s_secyear.sale_type = 's'
   and t_c_secyear.sale_type = 'c'
   and t_w_secyear.sale_type = 'w'
   and t_s_firstyear.dyear =  2001
   and t_s_secyear.dyear = 2001+1
   and t_c_firstyear.dyear =  2001
   and t_c_secyear.dyear =  2001+1
   and t_w_firstyear.dyear = 2001
   and t_w_secyear.dyear = 2001+1
   and t_s_firstyear.year_total > 0
   and t_c_firstyear.year_total > 0
   and t_w_firstyear.year_total > 0
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_s_firstyear.year_total > 0 then t_s_secyear.year_total / t_s_firstyear.year_total else null end
   and case when t_c_firstyear.year_total > 0 then t_c_secyear.year_total / t_c_firstyear.year_total else null end
           > case when t_w_firstyear.year_total > 0 then t_w_secyear.year_total / t_w_firstyear.year_total else null end
 order by t_s_secyear.customer_preferred_cust_flag
limit 100
POSTHOOK: type: QUERY
Plan optimized by CBO.

Vertex dependency in root stage
Reducer 10 <- Reducer 9 (SIMPLE_EDGE)
Reducer 12 <- Map 11 (SIMPLE_EDGE), Map 18 (SIMPLE_EDGE)
Reducer 13 <- Map 25 (SIMPLE_EDGE), Reducer 12 (SIMPLE_EDGE)
Reducer 14 <- Reducer 13 (SIMPLE_EDGE)
Reducer 15 <- Map 11 (SIMPLE_EDGE), Map 18 (SIMPLE_EDGE)
Reducer 16 <- Map 25 (SIMPLE_EDGE), Reducer 15 (SIMPLE_EDGE)
Reducer 17 <- Reducer 16 (SIMPLE_EDGE)
Reducer 19 <- Map 18 (SIMPLE_EDGE), Map 26 (SIMPLE_EDGE)
Reducer 2 <- Map 1 (SIMPLE_EDGE), Map 18 (SIMPLE_EDGE)
Reducer 20 <- Map 25 (SIMPLE_EDGE), Reducer 19 (SIMPLE_EDGE)
Reducer 21 <- Reducer 20 (SIMPLE_EDGE)
Reducer 22 <- Map 18 (SIMPLE_EDGE), Map 26 (SIMPLE_EDGE)
Reducer 23 <- Map 25 (SIMPLE_EDGE), Reducer 22 (SIMPLE_EDGE)
Reducer 24 <- Reducer 23 (SIMPLE_EDGE)
Reducer 3 <- Map 25 (SIMPLE_EDGE), Reducer 2 (SIMPLE_EDGE)
Reducer 4 <- Reducer 3 (SIMPLE_EDGE)
Reducer 5 <- Reducer 10 (SIMPLE_EDGE), Reducer 14 (SIMPLE_EDGE), Reducer 17 (SIMPLE_EDGE), Reducer 4 (SIMPLE_EDGE)
Reducer 6 <- Reducer 21 (SIMPLE_EDGE), Reducer 24 (SIMPLE_EDGE), Reducer 5 (SIMPLE_EDGE)
Reducer 7 <- Reducer 6 (SIMPLE_EDGE)
Reducer 8 <- Map 1 (SIMPLE_EDGE), Map 18 (SIMPLE_EDGE)
Reducer 9 <- Map 25 (SIMPLE_EDGE), Reducer 8 (SIMPLE_EDGE)

Stage-0
  Fetch Operator
    limit:100
    Stage-1
      Reducer 7
      File Output Operator [FS_146]
        Limit [LIM_145] (rows=100 width=88)
          Number of rows:100
          Select Operator [SEL_144] (rows=632486460 width=88)
            Output:["_col0"]
          <-Reducer 6 [SIMPLE_EDGE]
            SHUFFLE [RS_143]
              Select Operator [SEL_142] (rows=632486460 width=88)
                Output:["_col0"]
                Filter Operator [FIL_141] (rows=632486460 width=88)
                  predicate:CASE WHEN ((_col39 > 0)) THEN (CASE WHEN ((_col23 > 0)) THEN (((_col31 / _col23) > (_col47 / _col39))) ELSE ((null > (_col47 / _col39))) END) ELSE (CASE WHEN ((_col23 > 0)) THEN (((_col31 / _col23) > null)) ELSE (null) END) END
                  Merge Join Operator [MERGEJOIN_283] (rows=1264972921 width=88)
                    Conds:RS_137._col0=RS_138._col0(Inner),RS_137._col0=RS_139._col0(Inner),Output:["_col11","_col23","_col31","_col39","_col47"]
                  <-Reducer 21 [SIMPLE_EDGE]
                    SHUFFLE [RS_138]
                      PartitionCols:_col0
                      Filter Operator [FIL_114] (rows=29040539 width=135)
                        predicate:(_col7 > 0)
                        Select Operator [SEL_267] (rows=87121617 width=135)
                          Output:["_col0","_col7"]
                          Group By Operator [GBY_113] (rows=87121617 width=135)
                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                          <-Reducer 20 [SIMPLE_EDGE]
                            SHUFFLE [RS_112]
                              PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                              Group By Operator [GBY_111] (rows=174243235 width=135)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                Select Operator [SEL_109] (rows=174243235 width=135)
                                  Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                  Merge Join Operator [MERGEJOIN_279] (rows=174243235 width=135)
                                    Conds:RS_106._col1=RS_107._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                  <-Map 25 [SIMPLE_EDGE]
                                    SHUFFLE [RS_107]
                                      PartitionCols:_col0
                                      Select Operator [SEL_73] (rows=80000000 width=860)
                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                        Filter Operator [FIL_260] (rows=80000000 width=860)
                                          predicate:(c_customer_sk is not null and c_customer_id is not null)
                                          TableScan [TS_71] (rows=80000000 width=860)
                                            default@customer,customer,Tbl:COMPLETE,Col:NONE,Output:["c_customer_sk","c_customer_id","c_first_name","c_last_name","c_preferred_cust_flag","c_birth_country","c_login","c_email_address"]
                                  <-Reducer 19 [SIMPLE_EDGE]
                                    SHUFFLE [RS_106]
                                      PartitionCols:_col1
                                      Merge Join Operator [MERGEJOIN_278] (rows=158402938 width=135)
                                        Conds:RS_103._col0=RS_104._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                      <-Map 18 [SIMPLE_EDGE]
                                        SHUFFLE [RS_104]
                                          PartitionCols:_col0
                                          Select Operator [SEL_99] (rows=36524 width=1119)
                                            Output:["_col0"]
                                            Filter Operator [FIL_262] (rows=36524 width=1119)
                                              predicate:((d_year = 2001) and d_date_sk is not null)
                                              TableScan [TS_68] (rows=73049 width=1119)
                                                default@date_dim,date_dim,Tbl:COMPLETE,Col:NONE,Output:["d_date_sk","d_year"]
                                      <-Map 26 [SIMPLE_EDGE]
                                        SHUFFLE [RS_103]
                                          PartitionCols:_col0
                                          Select Operator [SEL_96] (rows=144002668 width=135)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                            Filter Operator [FIL_261] (rows=144002668 width=135)
                                              predicate:(ws_bill_customer_sk is not null and ws_sold_date_sk is not null)
                                              TableScan [TS_94] (rows=144002668 width=135)
                                                default@web_sales,web_sales,Tbl:COMPLETE,Col:NONE,Output:["ws_sold_date_sk","ws_bill_customer_sk","ws_ext_discount_amt","ws_ext_sales_price","ws_ext_wholesale_cost","ws_ext_list_price"]
                  <-Reducer 24 [SIMPLE_EDGE]
                    SHUFFLE [RS_139]
                      PartitionCols:_col0
                      Select Operator [SEL_136] (rows=87121617 width=135)
                        Output:["_col0","_col7"]
                        Group By Operator [GBY_135] (rows=87121617 width=135)
                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                        <-Reducer 23 [SIMPLE_EDGE]
                          SHUFFLE [RS_134]
                            PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                            Group By Operator [GBY_133] (rows=174243235 width=135)
                              Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                              Select Operator [SEL_131] (rows=174243235 width=135)
                                Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                Merge Join Operator [MERGEJOIN_281] (rows=174243235 width=135)
                                  Conds:RS_128._col1=RS_129._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                <-Map 25 [SIMPLE_EDGE]
                                  SHUFFLE [RS_129]
                                    PartitionCols:_col0
                                     Please refer to the previous Select Operator [SEL_73]
                                <-Reducer 22 [SIMPLE_EDGE]
                                  SHUFFLE [RS_128]
                                    PartitionCols:_col1
                                    Merge Join Operator [MERGEJOIN_280] (rows=158402938 width=135)
                                      Conds:RS_125._col0=RS_126._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                    <-Map 18 [SIMPLE_EDGE]
                                      SHUFFLE [RS_126]
                                        PartitionCols:_col0
                                        Select Operator [SEL_121] (rows=36524 width=1119)
                                          Output:["_col0"]
                                          Filter Operator [FIL_265] (rows=36524 width=1119)
                                            predicate:((d_year = 2002) and d_date_sk is not null)
                                             Please refer to the previous TableScan [TS_68]
                                    <-Map 26 [SIMPLE_EDGE]
                                      SHUFFLE [RS_125]
                                        PartitionCols:_col0
                                         Please refer to the previous Select Operator [SEL_96]
                  <-Reducer 5 [SIMPLE_EDGE]
                    SHUFFLE [RS_137]
                      PartitionCols:_col0
                      Select Operator [SEL_93] (rows=574987679 width=88)
                        Output:["_col0","_col11","_col23","_col31"]
                        Filter Operator [FIL_92] (rows=574987679 width=88)
                          predicate:CASE WHEN ((_col7 > 0)) THEN (CASE WHEN ((_col23 > 0)) THEN (((_col31 / _col23) > (_col15 / _col7))) ELSE ((null > (_col15 / _col7))) END) ELSE (CASE WHEN ((_col23 > 0)) THEN (((_col31 / _col23) > null)) ELSE (null) END) END
                          Select Operator [SEL_91] (rows=1149975359 width=88)
                            Output:["_col0","_col7","_col11","_col15","_col23","_col31"]
                            Merge Join Operator [MERGEJOIN_282] (rows=1149975359 width=88)
                              Conds:RS_86._col0=RS_87._col0(Inner),RS_86._col0=RS_88._col0(Inner),RS_86._col0=RS_89._col0(Inner),Output:["_col0","_col7","_col15","_col23","_col27","_col31"]
                            <-Reducer 10 [SIMPLE_EDGE]
                              SHUFFLE [RS_87]
                                PartitionCols:_col0
                                Filter Operator [FIL_42] (rows=58077952 width=135)
                                  predicate:(_col7 > 0)
                                  Select Operator [SEL_269] (rows=174233858 width=135)
                                    Output:["_col0","_col7"]
                                    Group By Operator [GBY_41] (rows=174233858 width=135)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                                    <-Reducer 9 [SIMPLE_EDGE]
                                      SHUFFLE [RS_40]
                                        PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                        Group By Operator [GBY_39] (rows=348467716 width=135)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                          Select Operator [SEL_37] (rows=348467716 width=135)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                            Merge Join Operator [MERGEJOIN_273] (rows=348467716 width=135)
                                              Conds:RS_34._col1=RS_35._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                            <-Map 25 [SIMPLE_EDGE]
                                              SHUFFLE [RS_35]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_73]
                                            <-Reducer 8 [SIMPLE_EDGE]
                                              SHUFFLE [RS_34]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_272] (rows=316788826 width=135)
                                                  Conds:RS_31._col0=RS_32._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                                <-Map 18 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_32]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_27] (rows=36524 width=1119)
                                                      Output:["_col0"]
                                                      Filter Operator [FIL_253] (rows=36524 width=1119)
                                                        predicate:((d_year = 2001) and d_date_sk is not null)
                                                         Please refer to the previous TableScan [TS_68]
                                                <-Map 1 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_31]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_46] (rows=287989836 width=135)
                                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                      Filter Operator [FIL_255] (rows=287989836 width=135)
                                                        predicate:(cs_bill_customer_sk is not null and cs_sold_date_sk is not null)
                                                        TableScan [TS_44] (rows=287989836 width=135)
                                                          default@catalog_sales,catalog_sales,Tbl:COMPLETE,Col:NONE,Output:["cs_sold_date_sk","cs_bill_customer_sk","cs_ext_discount_amt","cs_ext_sales_price","cs_ext_wholesale_cost","cs_ext_list_price"]
                            <-Reducer 14 [SIMPLE_EDGE]
                              SHUFFLE [RS_89]
                                PartitionCols:_col0
                                Select Operator [SEL_85] (rows=348477374 width=88)
                                  Output:["_col0","_col3","_col7"]
                                  Group By Operator [GBY_84] (rows=348477374 width=88)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                                  <-Reducer 13 [SIMPLE_EDGE]
                                    SHUFFLE [RS_83]
                                      PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                      Group By Operator [GBY_82] (rows=696954748 width=88)
                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                        Select Operator [SEL_80] (rows=696954748 width=88)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                          Merge Join Operator [MERGEJOIN_277] (rows=696954748 width=88)
                                            Conds:RS_77._col1=RS_78._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                          <-Map 25 [SIMPLE_EDGE]
                                            SHUFFLE [RS_78]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_73]
                                          <-Reducer 12 [SIMPLE_EDGE]
                                            SHUFFLE [RS_77]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_276] (rows=633595212 width=88)
                                                Conds:RS_74._col0=RS_75._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                              <-Map 18 [SIMPLE_EDGE]
                                                SHUFFLE [RS_75]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_70] (rows=36524 width=1119)
                                                    Output:["_col0"]
                                                    Filter Operator [FIL_259] (rows=36524 width=1119)
                                                      predicate:((d_year = 2002) and d_date_sk is not null)
                                                       Please refer to the previous TableScan [TS_68]
                                              <-Map 11 [SIMPLE_EDGE]
                                                SHUFFLE [RS_74]
                                                  PartitionCols:_col0
                                                  Select Operator [SEL_67] (rows=575995635 width=88)
                                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5"]
                                                    Filter Operator [FIL_258] (rows=575995635 width=88)
                                                      predicate:(ss_customer_sk is not null and ss_sold_date_sk is not null)
                                                      TableScan [TS_65] (rows=575995635 width=88)
                                                        default@store_sales,store_sales,Tbl:COMPLETE,Col:NONE,Output:["ss_sold_date_sk","ss_customer_sk","ss_ext_discount_amt","ss_ext_sales_price","ss_ext_wholesale_cost","ss_ext_list_price"]
                            <-Reducer 17 [SIMPLE_EDGE]
                              SHUFFLE [RS_86]
                                PartitionCols:_col0
                                Filter Operator [FIL_20] (rows=116159124 width=88)
                                  predicate:(_col7 > 0)
                                  Select Operator [SEL_268] (rows=348477374 width=88)
                                    Output:["_col0","_col7"]
                                    Group By Operator [GBY_19] (rows=348477374 width=88)
                                      Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                                    <-Reducer 16 [SIMPLE_EDGE]
                                      SHUFFLE [RS_18]
                                        PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                        Group By Operator [GBY_17] (rows=696954748 width=88)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                          Select Operator [SEL_15] (rows=696954748 width=88)
                                            Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                            Merge Join Operator [MERGEJOIN_271] (rows=696954748 width=88)
                                              Conds:RS_12._col1=RS_13._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                            <-Map 25 [SIMPLE_EDGE]
                                              SHUFFLE [RS_13]
                                                PartitionCols:_col0
                                                 Please refer to the previous Select Operator [SEL_73]
                                            <-Reducer 15 [SIMPLE_EDGE]
                                              SHUFFLE [RS_12]
                                                PartitionCols:_col1
                                                Merge Join Operator [MERGEJOIN_270] (rows=633595212 width=88)
                                                  Conds:RS_9._col0=RS_10._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                                <-Map 18 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_10]
                                                    PartitionCols:_col0
                                                    Select Operator [SEL_5] (rows=36524 width=1119)
                                                      Output:["_col0"]
                                                      Filter Operator [FIL_250] (rows=36524 width=1119)
                                                        predicate:((d_year = 2001) and d_date_sk is not null)
                                                         Please refer to the previous TableScan [TS_68]
                                                <-Map 11 [SIMPLE_EDGE]
                                                  SHUFFLE [RS_9]
                                                    PartitionCols:_col0
                                                     Please refer to the previous Select Operator [SEL_67]
                            <-Reducer 4 [SIMPLE_EDGE]
                              SHUFFLE [RS_88]
                                PartitionCols:_col0
                                Select Operator [SEL_64] (rows=174233858 width=135)
                                  Output:["_col0","_col7"]
                                  Group By Operator [GBY_63] (rows=174233858 width=135)
                                    Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(VALUE._col0)"],keys:KEY._col0, KEY._col1, KEY._col2, KEY._col3, KEY._col4, KEY._col5, KEY._col6
                                  <-Reducer 3 [SIMPLE_EDGE]
                                    SHUFFLE [RS_62]
                                      PartitionCols:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                      Group By Operator [GBY_61] (rows=348467716 width=135)
                                        Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"],aggregations:["sum(_col7)"],keys:_col0, _col1, _col2, _col3, _col4, _col5, _col6
                                        Select Operator [SEL_59] (rows=348467716 width=135)
                                          Output:["_col0","_col1","_col2","_col3","_col4","_col5","_col6","_col7"]
                                          Merge Join Operator [MERGEJOIN_275] (rows=348467716 width=135)
                                            Conds:RS_56._col1=RS_57._col0(Inner),Output:["_col2","_col3","_col4","_col5","_col9","_col10","_col11","_col12","_col13","_col14","_col15"]
                                          <-Map 25 [SIMPLE_EDGE]
                                            SHUFFLE [RS_57]
                                              PartitionCols:_col0
                                               Please refer to the previous Select Operator [SEL_73]
                                          <-Reducer 2 [SIMPLE_EDGE]
                                            SHUFFLE [RS_56]
                                              PartitionCols:_col1
                                              Merge Join Operator [MERGEJOIN_274] (rows=316788826 width=135)
                                                Conds:RS_53._col0=RS_54._col0(Inner),Output:["_col1","_col2","_col3","_col4","_col5"]
                                              <-Map 18 [SIMPLE_EDGE]
                                                SHUFFLE [RS_54]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_70]
                                              <-Map 1 [SIMPLE_EDGE]
                                                SHUFFLE [RS_53]
                                                  PartitionCols:_col0
                                                   Please refer to the previous Select Operator [SEL_46]

